
export interface ScopeType  {
    name: string,
    getValue: Function,
    [key: string]: any
}

export interface ElementType {
    [key: string]: Function
}

export interface PropertyType {
    label: string,
    type: string,
    default?: any,
    priority?: number,
    editable?: boolean,
    props?: {
        [key: string]: any
    },
    options?: {
        [key: string]: any
    },
    schema?: any
}

export interface EventType {
    label: string,
    params?: {
        [key: string]: string
    }
}

export interface MethodType {
    label: string,
    body: Function
}

export interface LayoutComponentType {
    comp: ComponentType,
    option: LayoutOptionType
}

export interface ContainerComponentsType {
    [key: string]: BaseComponentInterface
}

export interface ComponentType  {
    name: string,
    type: string,
    template?: string,
    scope?: ScopeType,
    props?: {
        components?: ContainerComponentsType | LayoutComponentType[],
        [key: string]: any
    },
    on?: object,
    appendTo?: object,
    [key: string]: any
}

export interface LayoutOptionType {
    [key: string]: any
}

export interface BaseComponentInterface {
    name: string,
    type: string,
    element: ElementType,
    scope: ScopeType,
    parent: BaseComponentInterface,
    destroy: Function,
    empty?: Function,
    prop: Function,
    props: Function
}

export interface FormElementInterface {
    changed: Function,
    onChange?: Function
}

export interface StateType {
    name: string;
    url?: string;
    view?: ComponentType;
    loaded?: boolean;
    controllers?: string[];
    query?: object;
    data?: object;
    load?: Function;
}

export interface StateRunOption {
    refreshData?: boolean;
}