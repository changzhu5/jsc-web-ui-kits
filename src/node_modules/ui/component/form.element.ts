import BaseContainer from "ui/component/container";
import { ComponentType, FormElementInterface } from "ui/type";

abstract class BaseFormElement extends BaseContainer implements FormElementInterface
{

    public initialValue;

    public overrideOnApply;

    public onChange;

    public constructor(options: ComponentType) {
        super(options);
        const initialValue = this.prop("value");
        this.initialValue = typeof(initialValue) === "object" ? this.copy(initialValue) : initialValue;
        this.overrideOnApply = options.options.overrideOnApply === undefined ? true : options.options.overrideOnApply;
        this.on("apply", function() {
            if (this.changed()) {
                this.trigger("change", this.initialValue, this.prop('value'));
            }
        });
        this.on("change", function() {
            if (! this.overrideOnApply) {
                return;
            }
            this.commit();
        });
    }

    public static properties() {
        let props = super.properties();
        props['value'] = {
            label: "Value",
            type: "mmTextarea",
            default: ""
        };

        return props;
    }

    public static events() {
        let events = super.events();
        events["change"] = {
            label: "Value changed",
            params: {
                oldValue: "any",
                newValue: "any"
            }
        };

        return events;
    }

    public reset() {
        this.prop("value", this.initialValue);
    }

    public changed(): boolean {
        let a = "";
        if (this.initialValue) {
            a = JSON.stringify(this.initialValue);
        }
        let b = "";
        if (this.prop('value')) {
            b = JSON.stringify(this.prop("value"));
        }
        return a !== b ? true : false;
    }

    public commit() {
        const newValue = this.prop("value");
        this.initialValue = typeof(newValue) === "object" ? this.copy(newValue) : newValue;
    }
}

export default BaseFormElement;