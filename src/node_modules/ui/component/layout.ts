import BaseComponent from "ui/component/component";
import app from "ui/module/index";
import * as $ from "jquery/dist/jquery.min.js";
import { LayoutOptionType, LayoutComponentType } from "ui/type";

class BaseLayout extends BaseComponent
{
    public static properties() {
        let props = super.properties();
        props['components'] = {
            label: "Components",
            type: "mmCodeEditor"
        };

        return props;
    }

    public setComponents(components: LayoutComponentType[]) {
        if (! this.isArray(components)) {
            return;
        }
        let comps = [];
        for (let i = 0; i < components.length; i++) {
            if (! components[i]) {
                continue;
            }
            let option = components[i].option !== undefined ? components[i].option : "";
            
            let comp = app.create(components[i].comp);
            comp.parent = this;
            comps.push({
                comp: {
                    name: comp.name,
                    type: comp.type
                },
                option: option
            });
        }
        this.setScopeVal("components", comps);
    }
    
    public add(comp: BaseComponent, layoutOption: LayoutOptionType = null) {
        if (! layoutOption) {
            layoutOption = {};
        }

        let components = this.prop("components");
        
        components.push({
            comp: {
                name: comp.name,
                type: comp.type
            },
            option: layoutOption
        });
        comp.parent = this;
        this.prop("components", components);
    }

    public drop(comp: BaseComponent, index: number, option:LayoutOptionType = null) {
        let compOption = {
            name: comp.name,
            type: comp.type
        };
        let comps = this.prop("components");
        
        let idx = -1;
        for (let i = 0; i < comps.length; i++) {
            let c = comps[i].comp;
            if (c.name == compOption.name && c.type == compOption.type) {
                idx = i;
                break;
            }
        }
        if (idx == index) {
            return false;
        }
        if (idx > -1) {
            comp.parent = this;
        }
        if (! option) {
            option = {};
        }

        let components = [];
        for (let i = 0; i < comps.length; i++) {
            if (i != idx) {
                components.push(comps[i]);
            }
        }
        
        if (index == 0) {
            components.unshift({
                comp: compOption,
                option: option
            });
        } else if (index >= comps.length) {
            components.push({
                comp: compOption,
                option: option
            });
        } else if (index == comps.length - 1) {
            let lastComp = components.pop();
            components.push({
                comp: compOption,
                option: option
            });
            components.push(lastComp);
        } else {
            let newIndex;
            if (idx > -1) {
                if (index > idx) {
                    newIndex = index - 1;
                } else {
                    newIndex = index;
                }
            } else {
                newIndex = index;
            }
            
            let list = components.slice(0, newIndex).concat({
                comp: compOption,
                option: option
            }).concat(components.slice(newIndex));
            
            components = list;
        }
        
        this.prop("components", components);
    }

    public eject(comp: BaseComponent, destroy: boolean = false): BaseComponent {
        let components = [];
        let comps = this.prop("components");
        comps.forEach(function(compData) {
            if (compData.comp.name == comp.name && compData.comp.type == comp.type) {
                //compData.option.visible = false;
                comp.element.appendTo($("body"));
                comp.parent = null;
            } else {
                components.push(compData);
            }
        });

        if (destroy) {
            comp.destroy();
        }

        this.prop("components", components);

        return comp;
    }

    public getComponents() {
        if (! this.getScopeVal("components")) {
            return [];
        }

        return this.getScopeVal("components");
    }

    public getComponentList(): BaseComponent[] {
        let comps = [];
        this.prop('components').forEach(function(c) {
            if (app.component(c.comp.name, c.comp.type)) {
                comps.push(app.component(c.comp.name, c.comp.type));
            }
        });

        return comps;
    }

    public get(index: number): BaseComponent | null {
        let comps = this.prop("components");
        if (comps[index] == null) {
            return null;
        }

        return app.component(comps[index].comp.name, comps[index].comp.type);
    }

    public updateOptions(index: number, options: LayoutOptionType) {
        let comps = this.prop("components");
        if (comps[index]) {
            let option = comps[index].option == null ? {} : comps[index].option;
            for (const [key, value] of Object.entries(options)) {
                option[key] = value;
            }
            comps[index].option = option;
            this.apply();
        }
    }

    public empty() {
        this.getComponentList().forEach(function(c) {
            c.destroy();
        });
        this.setScopeVal('components', []);
        this.apply();
    }

    public destroy() {
        this.empty();
        super.destroy();
    }
}

export default BaseLayout;