import BaseContainer from "ui/component/container";
import * as $ from "jquery/dist/jquery.min.js";

export default class Panel extends BaseContainer
{
    public constructor(options) {
        if (! options.props) {
            options.props = {};
        }
        options.props.components = {
            body: {
                type: "mmContent"
            },
            action: {
                type: "mmContent"
            }
        }

        super(options);
    }
    
    public initScope(data: object = null) {
        const comp = this;
        const scope = {
            ...data,
            editing: false
        };
        super.initScope(data);
        this.scope.editLabel = function() {
            this.editing = true;
            comp.apply();
        }
        this.scope.saveLabel = function(e) {
            const value = $(e.target).val();
            const changed = value === this.label ? false : true;
            const oldValue = this.label;
            this.label = value;
            this.editing = false;
            comp.apply();
            if (changed) {
                comp.trigger("label-change", oldValue, value);
            }
        }
    }
    
    public static template() {
        return `
            <div class="card {{class}}">
                <div class="card-header d-flex">
                    <h5 class="card-title mb-0 d-flex align-items-center">
                        {{#if icon}}
                        <i class="fa fa-{{icon}} me-1"></i>
                        {{/if}}
                        {{#if editing}}
                        <div><input type="text" class="form-control" mm-enter="this.saveLabel(event)" value="{{label}}"></div>
                        {{else}}
                        <div class="cursor-pointer" mm-dblclick="this.editLabel(event)">{{{label}}}</div>
                        {{/if}}
                    </h5>
                    <div class="flex-grow-1"></div>
                    <div>
                        {{#if components.action}}
                        <mm-component name="{{components.action.name}}" type="{{components.action.type}}"></mm-component>
                        {{/if}}
                    </div>
                </div>
                <div class="card-body" position="body">
                    {{#if components.body}}
                    <mm-component name="{{components.body.name}}" type="{{components.body.type}}"></mm-component>
                    {{/if}}
                </div>
            </div>
        `;
    }

    public static properties() {
        let props = super.properties();
        props['label'] = {
            label: "Title",
            type: "mmTextfield"
        };
        props['icon'] = {
            label: "Icon",
            type:"mmTextfield"
        }
        props['content'] = {
            label: "Content",
            type: "mmTabs",
            props: {
                active: 'html',
                tabs: [
                    {
                        label: "HTML",
                        value: "html",
                        content: {
                            type: "mmTextarea"
                        }
                    },
                    {
                        label: "Component",
                        value: "component",
                        content: {
                            type: "mmComponentForm"
                        }
                    }
                ]
            },
            priority: 0
        }
        props['action'] = {
            label: "Action component on right side of title",
            type: "mmComponentForm",
            priority: 0
        };

        return props;
    }

    public static events() {
        let events = super.events();
        events["label-change"] = {
            label: "Label change"
        };

        return events;
    }

    public setContent(content) {
        this.get("body").prop('content', content);
    }

    public getContent() {
        return this.get("body").prop('content');
    }

    public setAction(action) {
        this.get('action').prop("content", action);
    }

    public getAction() {
        return this.get("action").prop("content");
    }
}