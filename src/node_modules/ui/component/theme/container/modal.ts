import BaseContainer from "ui/component/container";
import * as $ from "jquery/dist/jquery.min.js";
import app from "ui/module/index";

export default class Modal extends BaseContainer
{
    public constructor(options) {
        if (! options.props) {
            options.props = {};
        }
        options.props.components = {
            body: {
                type: "mmContent"
            },
            loader: {
                type: "mmOverlay",
                props: {
                    class: 'position-absolute w-100 h-100 left-0 top-0 mx-n3'
                }
            }
        }

        super(options);
    }

    public initScope(data: object = null) {
        super.initScope(data);
        const comp = this;
        this.scope.cancel = function(e) {
            e.stopPropagation();
            comp.props({
                visible: false,
                loading: false
            }).apply();
            comp.trigger("click", "cancel");
        }
        this.scope.ok = function(e) {
            e.stopPropagation();
            comp.prop("visible", false);
            comp.trigger("click", "ok");
        }
        this.scope.click = function(e) {
            e.stopPropagation();
            const action = this.buttons[$(e.target).attr("data-index")].action;
            comp.trigger('click', action);
        }
    }
    
    public static template() {
        return `
            <div class="modal {{class}} {{echo visible 'd-block show' 'd-none'}}">
                <div class="modal-dialog modal-{{size}}">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                {{#if icon}}
                                <i class="fa fa-{{icon}}"></i>
                                {{/if}}
                                {{label}}
                            </h5>
                            {{#if hasCloseButton}}
                            <button type="button" class="btn-close" aria-label="Close" mm-click="this.cancel(event)"></button>
                            {{/if}}
                        </div>
                        <div class="modal-body position-relative">
                            {{#if components.body}}
                            <mm-component name="{{components.body.name}}" type="{{components.body.type}}"></mm-component>
                            {{/if}}
                            <mm-component name="{{components.loader.name}}" type="{{components.loader.type}}"></mm-component>
                        </div>
                        {{#if showButtons}}
                        <div class="modal-footer">
                            {{#each buttons}}
                            <button class="btn btn-{{this.type}} float-end" {{echo this.disabled 'disabled'}} mm-click="this.click(event)" data-index="{{@index}}" {{echo loading 'disabled'}}>{{this.label}}</button>
                            {{/each}}
                            <button class="btn btn-default" mm-click="this.cancel(event)">{{cancelLabel}}</button>
                            <button class="btn btn-primary" mm-click="this.ok(event)" {{disabled (or loading okButtonDisabled)}}>{{okLabel}}</button>
                        </div>
                        {{/if}}
                    </div>
                </div>
            </div>    
        `;
    }

    public static properties() {
        let props = super.properties();
        props['label'] = {
            label: "Title",
            type: "mmTextfield"
        };
        props['icon'] = {
            label: "Icon",
            type:"mmTextfield"
        }
        props['okLabel'] = {
            label: "Text for 'Ok' button",
            type: "mmTextfield",
            default: "Ok"
        };
        props['cancelLabel'] = {
            label: "Text for 'Cancel' button",
            type: "mmTextfield",
            default: "Cancel"
        };
        props['okButtonDisabled'] = {
            label: 'Ok Button Disabled',
            type: "mmCheckbox",
            default: false
        };
        props['visible'] = {
            label: "Visibility",
            type: "mmCheckbox",
            default: false,
            priority: 0
        };
        props['showButtons'] = {
            label: "Display Buttons",
            type: "mmCheckbox",
            default: true
        };
        props['content'] = {
            label: "Content",
            type: "mmTabs",
            props: {
                active: 'html',
                tabs: [
                    {
                        label: "HTML",
                        value: "html",
                        content: {
                            type: "mmTextarea"
                        }
                    },
                    {
                        label: "Component",
                        value: "component",
                        content: {
                            type: "mmComponentForm"
                        }
                    }
                ]
            },
            priority: 0
        };
        props['data'] = {
            label: "Custom data",
            type: "mmCodeEditor"
        };
        props['size'] = {
            label: "Size",
            type: "mmDropdown",
            props: {
                options: [
                    {label: "Default", value: "xs"},
                    {label: "Small", value: "sm"},
                    {label: "Large", value: "lg"},
                    {label: "Extra Large", value: "xl"},
                    {label: "Super Large", value: "xlg"}
                ]
            },
            default: "xs"
        };

        props["buttons"] = {
            label: "Buttons[]",
            type: "mmRepeater",
            props: {
                columns: [
                    {
                        key: 'label',
                        label: 'Label',
                        primary: true,
                        component: {
                            type: 'mmTextfield'
                        }
                    },
                    {
                        key: 'type',
                        label: "type",
                        component: {
                            type: "mmDropdown",
                            props: {
                                options: [
                                    {label: "Primary", value: "primary"},
                                    {label: "Secondary", value: "secondary"},
                                    {label: "Info", value: "info"},
                                    {label: "Success", value: "success"},
                                    {label: "Warning", value: "warning"},
                                    {label: "Danger", value: "danger"},
                                    {label: "Light", value: "light"},
                                    {label: "Dark", value: "dark"},
                                    {label: "Primary Outline", value: "outline-primary"},
                                    {label: "Secondary Outline", value: "outline-secondary"},
                                    {label: "Info Outline", value: "outline-info"},
                                    {label: "Success Outline", value: "outline-success"},
                                    {label: "Warning Outline", value: "outline-warning"},
                                    {label: "Danger Outline", value: "outline-danger"},
                                    {label: "Light Outline", value: "outline-light"},
                                    {label: "Dark Outline", value: "outline-dark"},
                                    {label: "Link", value: "link"}
                                ]
                            }
                        }
                    }
                ]
            }
        };

        props["loading"] = {
            label: "Loading",
            type: "mmCheckbox",
            default: false,
            priority: 0
        };

        props["hasCloseButton"] = {
            label: "Close Button",
            type: "mmCheckbox",
            default: false,
        };

        return props;
    }

    public static events() {
        let events = super.events();
        events["click"] = {
            label: "Button click"
        };
        events["open"] = {
            label: "Modal visible"
        };
        events["close"] = {
            label: "Modal invisible"
        };

        return events;
    }

    public setContent(content) {
        this.get("body").prop("content", content);
    }

    public getContent() {
        return this.get("body").prop("content");
    }

    public setData(data) {
        this.get("body").prop("data", data);
    }

    public getData() {
        return this.get("body").prop("data");
    }

    public setVisible(bool) {
        bool = JSON.parse(bool);
        this.setScopeVal("visible", bool);
        if (bool) {
            this.trigger("open");
        } else {
            this.trigger("close");
        }
    }

    public setLoading(bool) {
        this.setScopeVal("loading", bool);
        this.get("loader").prop("visible", bool);
    }
}