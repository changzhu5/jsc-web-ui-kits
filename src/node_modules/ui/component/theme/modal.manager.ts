import BaseComponent from "ui/component/component";
import app from "ui/module/index";
import * as $ from "jquery/dist/jquery.min.js";

export default class WindowManager extends BaseComponent
{
    public initScope(data: object = null) {
        super.initScope(data);
        const comp = this;
        this.scope.modals = new Map();
        this.scope.click = function(e) {
            e.preventDefault();
            e.stopPropagation();
            const index = $(e.target).closest(".nav-item").attr("data-index");
            const link = this.links[index];
            comp.prop("active", link.value);
            comp.trigger("click", link.value);
        }

        this.scope.remove = function(e) {
            e.preventDefault();
            e.stopPropagation();
            const index = $(e.target).closest(".nav-item").attr("data-index");
            const links = comp.copy(this.links);
            links.splice(index, 1);
            comp.prop("links", links);
        }
    }

    public static template() {
        return `
            <div class="navbar navbar-expand-lg navbar-dark bg-dark p-0 bottom-0 w-100 {{class}}">
                <ul class="navbar-nav flex-row">
                    {{#each links as |link|}}
                    <li class="nav-item position-relative" data-index="{{@index}}">
                        <a class="nav-link {{echo (equal link.value ../active) 'active bg-gray-800'}} px-2 {{echo link.removable 'pe-4'}}" href="#" mm-click="this.click(event)">
                            {{#if link.icon}}
                            <i class="fa fa-{{link.icon}}"></i>
                            {{/if}}
                            <span>{{link.label}}</span>
                            {{#if link.badge}}
                            <strong class="badge rounded-pill bg-danger">{{link.badge.label}}</strong>
                            {{/if}}
                            {{#if link.removable}}
                            <i class="fa fa-times cursor-pointer position-absolute end-0 top-50 translate-middle-y me-2 text-muted fs-6" mm-click="this.remove(event);"></i>
                            {{/if}}
                        </a>
                    </li>
                    {{/each}}
                </ul>
            </div>    
        `;
    }

    public static properties() {
        let props = super.properties();

        props["class"]["default"] = ["position-fixed"];
        props['active'] = {
            label: "Active",
            type: "mmTextfield"
        };

        props['links'] = {
            label: "Links",
            type: "mmRepeater",
            priority: 2,
            props: {
                columns: [
                    {
                        key: "label",
                        label: "Label",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "value",
                        label: "Value",
                        primary: true,
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "icon",
                        label: "Icon",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "badge",
                        label: "Badge",
                        component: {
                            type: "mmForm",
                            props: {
                                elements: [
                                    {
                                        comp: {
                                            name: "label",
                                            type: "mmTextfield"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            }
        };

        return props;
    }

    public static events() {
        let events = super.events();
        
        events['click'] = {
            label: "A link click event"
        };

        return events;
    }

    public setLinks(links) {
        this.setScopeVal("links", links);
        let modals = this.getScopeVal("modals");
        links.forEach(function(link) {
            const comp = this;
            if (! modals.has(link.value)) {
                modals.set(link.value, app.create({
                    type: "mmModal",
                    props: {
                        ...link?.modal?.props,
                        label: link.label
                    }
                }));
                modals.get(link.value).on("close", function() {
                    comp.prop("active", "");
                });
            } else {
                let modal = modals.get(link.value);
                if (link?.modal?.props) {
                    link.modal.props.label = link.label;
                    modal.props(link.modal.props).apply();
                    delete link.modal.props.label;
                } else {
                    modal.prop("label", link.label);
                }
                if (link?.modal?.on) {
                    for (const [name, func] of link.modal.on) {
                        modal.on(name, func);
                    }
                }
            }
        }, this);
        
        this.setScopeVal("modals", modals);
    }

    public setActive(value) {
        let modals = this.getScopeVal("modals");
        if (modals.size > 0) {
            for (const [key, modal] of modals) {
                if (key === value) {
                    if (! modal.prop("visible")) {
                        modal.prop("visible", true);
                    }
                } else {
                    if (modal.prop("visible")) {
                        modal.prop("visible", false);
                    }
                }
            }
        }
        this.setScopeVal("active", value);
    }

    public modal(value) {
        let modals = this.getScopeVal("modals");
        if (modals.has(value)) {
            return modals.get(value);
        }
        return "";
    }

    public add(link) {
        let links = this.prop("links");
        if (! this.isArray(links)) {
            links = [];
        }
        let found = false;
        
        links.forEach(function(l, index) {
            if (l.value === link.value) {
                found = true;
                for (let key in link) {
                    links[index][key] = link[key];
                }
                return;
            }
        });
        if (! found) {
            links.push(link);
        }
        
        this.prop("links", links);
    }

    public remove(value) {
        if (value === this.prop("active")) {
            this.prop("active", "");
        }
        let links = this.prop("links");
        if (! links) {
            links = [];
        }
        let newLinks = [];
        links.forEach(function(l) {
            if (l.value != value) {
                newLinks.push(l);
            }
        });
        if (newLinks.length !== links.length) {
            this.prop("links", newLinks);
        }
    }

    public destroy() {
        let modals = this.getScopeVal("modals");
        if (modals.size > 0) {
            for (const [key, modal] of modals) {
                modal.destroy();
            }
            modals.clear();
        }
        super.destroy();
    }
}