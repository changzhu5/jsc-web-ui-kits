import BaseComponent from "ui/component/component";
import * as $ from "jquery/dist/jquery.min.js";
import app from "ui/module/index";

export default class ContextMenu extends BaseComponent 
{
    public constructor(options) {
        super(options);
        const comp = this;
        app.on("click", function(e) {
            if (comp.prop("visible")) {
                comp.prop("visible", false);
            }
        });
    }

    public initScope(data: object = null) {
        super.initScope(data);
        const comp = this;
        this.scope.click = function(e) {
            e.stopPropagation();
            e.preventDefault();

            const action = this.actions[$(e.target).attr("data-index")];
            comp.prop("visible", false);
            comp.trigger("click", action.value);
        }
    }

    public static template() {
        return `
            <ul class="dropdown-menu {{class}} {{echo visible 'show' 'hide'}}" style="left: {{echo pos.left pos.left '0'}}; top: {{echo pos.top pos.top '0'}}">
                {{#each actions}}
                <li>
                    <a class="dropdown-item" href="#" data-index="{{@index}}" mm-click="this.click(event)">
                        {{#if this.icon}}
                        <i class="fa fa-{{this.icon}}">&nbsp;</i>
                        {{/if}}
                        {{this.label}}
                    </a>
                <li>
                {{/each}}
            </ul>
        `;
    }

    public static properties() {
        let props = super.properties();

        props["class"]["default"] = ["position-fixed"];
        
        props["actions"] = {
            label: "Actions",
            type: "mmRepeater",
            props: {
                columns: [
                    {
                        key: "label",
                        label: "Label",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "value",
                        label: "Value",
                        primary: true,
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "icon",
                        label: "Icon",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                ]
            }
        };

        props["position"] = {
            label: "Position",
            type: "mmForm",
            props: {
                elements: [
                    {
                        comp: {
                            name: "left",
                            type: "mmNumber"
                        },
                        option: {
                            label: "Left"
                        }
                    },
                    {
                        comp: {
                            name: "top",
                            type: "mmNumber"
                        },
                        option: {
                            label: "Top"
                        }
                    }
                ]
            },
            default: {
                left: 0,
                top: 0
            }
        };

        props["visible"] = {
            label: "Visible",
            type: "mmCheckbox",
            default: false
        };

        return props;
    }

    public static events() {
        let events = super.events();

        events["click"] = {
            label: "Click"
        };

        return events;
    }

    public setPosition(pos) {
        this.setScopeVal("position", this.copy(pos));
        if (pos.left) {
            pos.left += "px";
        }
        if (pos.top) {
            pos.top += "px";
        }
        this.setScopeVal("pos", pos);
    }

    public open(e) {
        this.props({
            position: {
                left: e.clientX,
                top: e.clientY
            },
            visible: true
        }).apply();
    }
}