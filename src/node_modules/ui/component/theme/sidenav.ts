import * as $ from "jquery/dist/jquery.min.js";
import BaseComponent from "ui/component/component";

export default class Sidenav extends BaseComponent
{
    public constructor(options) {
        super(options);
        if (this.prop("sticky")) {
            let comp = this;
            let top;
            let width;
            $(window).scroll(function() {
                if (! top) {
                    top = parseInt(comp.element.offset().top);
                    width = comp.element.width();
                }
                
                let scrollTop = parseInt($(window).scrollTop());
                if (scrollTop >= top) {
                    if (comp.element.css("position") != "fixed") {
                        comp.element.css({
                            position: "fixed",
                            top: 0,
                            width: width
                        });
                    }
                } else {
                    if (comp.element.css("top") != "auto") {
                        comp.element.css({
                            position: "static",
                            top: "auto",
                            width: ""
                        });
                    }
                }
            });
        }
    }

    public initScope(data: object = null) {
        super.initScope(data);
        const comp = this;
        this.scope.click = function(e) {
            e.preventDefault();
            e.stopPropagation();
            const a = $(e.target).closest("a")
            const action = a.attr("data-value");
            if (a.parent().find("ul").length > 0) {
                a.parent().find("ul").toggleClass("d-block");
                return;
            }
            comp.prop('active', action);
            comp.trigger("click", action);
        }
        this.scope.open = function(value) {
            const links = comp.prop("links");
            const active = comp.prop("active");
            if (! links) {
                return false;
            }
            if (! active) {
                return false;
            }
            for (const link of links) {
                if (link.value == value) {
                    if (! link.menus) {
                        return false;
                    }
                    for (const menu of link.menus) {
                        if (menu.value == active) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
    }

    public static template() {
        return `
            <div class="card mb-4 border-0 {{class}}">
                <div class="list-group flex-column">
                    {{#each links as |link|}}
                    <div class="{{echo link.menus 'dropdown'}} bg-light">
                        <a class="position-relative list-group-item list-group-item-action {{echo link.menus 'shadow-sm'}} {{echo (equal link.value @root/active) 'active'}}" href="#" data-value="{{echo link.value link.value}}" mm-click="this.click(event)">
                            {{#if link.icon}} 
                            <i class="fa fa-{{link.icon}}"></i> 
                            {{/if}}
                            {{link.label}} 
                            {{#if link.badge}}
                            <span class="badge bg-danger position-absolute end-0 {{echo link.menus 'me-3' 'me-2'}} translate-middle-y top-50">{{link.badge}}</span>
                            {{/if}}
                            {{#if link.menus}}
                            <i class="fa fa-angle-down text-muted position-absolute end-0 me-2 translate-middle-y top-50"></i>
                            {{/if}}
                        </a>
                        {{#if link.menus}}
                        <ul class="dropdown-menu p-1 b-0 position-static border border-top-0 bg-white {{echo @last '' 'border-bottom-0'}} {{echo (call 'open' @root link.value) 'd-block'}}">
                            {{#each link.menus as |menu|}}
                            <li>
                                <a class="dropdown-item position-relative ps-4 fs-6 {{echo (equal menu.value @root/active) 'active'}}" href="" data-value="{{echo menu.value menu.value}}" mm-click="this.click(event)">
                                    {{#if menu.icon}}
                                    <i class="fa fa-{{menu.icon}}"></i> 
                                    {{/if}}
                                    {{menu.label}} 
                                    {{#if menu.badge}}
                                    <span class="badge bg-{{menu.badge.type}} position-absolute end-0 me-1 translate-middle-y top-50">{{menu.badge.label}}</span>
                                    {{/if}}
                                </a>
                            </li>
                            {{/each}}
                        </ul>
                        {{/if}}
                    </div>
                    {{/each}}
                </ul>
            </div>   
        `;
    }

    public static properties() {
        let props = super.properties();
        props['active'] = {
            label: "Active",
            type: "mmTextfield",
            default: ""
        };
        props['links'] = {
            label: "Links",
            type: "mmRepeater",
            props: {
                columns: [
                    {
                        key: "label",
                        label: "Label",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "value",
                        primary: true,
                        label: "Value",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "icon",
                        label: "Icon",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "badge",
                        label: "Badge",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "menus",
                        label: "Menus",
                        component: {
                            type: "mmRepeater",
                            props: 
                            {
                                columns: [
                                    {
                                        key: "label",
                                        label: "Label",
                                        component: {
                                            type: "mmTextfield"
                                        }
                                    },
                                    {
                                        key: "value",
                                        primary: true,
                                        label: "Value",
                                        component: {
                                            type: "mmTextfield"
                                        }
                                    },
                                    {
                                        key: "icon",
                                        label: "Icon",
                                        component: {
                                            type: "mmTextfield"
                                        }
                                    },
                                    {
                                        key: "badge",
                                        label: "Badge",
                                        component: {
                                            type: "mmTextfield"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            }
        };

        props["sticky"] = {
            label: "Sticky",
            type: "mmCheckbox",
            default: false
        };

        return props;
    }

    public static events() {
        let events = super.events();
        events['click'] = {
            label: "Click event"
        };

        return events;
    }
}