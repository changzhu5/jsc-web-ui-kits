import BaseFormElement from "ui/component/form.element";
import * as moment from "moment";
import * as $ from "jquery";

const InputTypeValueFormatMap = {
    "date": "YYYY-MM-DD",
    "time": "HH:mm",
    "datetime-local": "YYYY-MM-DDTHH:mm"
};

export default class DateTime extends BaseFormElement {
    public initScope(scope: object = null) {
        super.initScope(scope);

        this.scope.change = function(e) {
            this.value = $(e.target).val();
        }
    }
    public static template() {
        return `
            <div class="{{class}}">
                <input type="{{inputType}}" value="{{value}}" class="form-control" {{disabled disabled}} {{readonly readonly}} mm-change="this.change(event)">
            </div>
        `;
    }

    public static properties() {
        let props = super.properties();

        props["disabled"] = {
            label: "Disabled",
            type: "mmCheckbox",
            default: false
        };

        props["readonly"] = {
            label: "ReadOnly",
            type: "mmCheckbox",
            default: false
        };

        props["format"] = {
            label: "Format",
            type: "mmTextfield",
            default: "YYYY-MM-DD HH:mm",
            priority: 2
        };

        props["inputType"] = {
            label: "Input Type",
            type: "mmDropdown",
            props: {
                options: [
                    {label: "Date", value: "date"},
                    {label: "Time", value: "time"},
                    {label: "Date Time", value: "datetime-local"}
                ]
            },
            default: "datetime-local",
            priority: 2
        };

        return props;
    }

    public setValue(value) {
        const m = moment(value, this.getScopeVal("format"));
        const f = InputTypeValueFormatMap[this.getScopeVal("inputType")];
        if (m.isValid()) {
            this.setScopeVal("value", m.format(f));
        } else {
            this.setScopeVal("value", "");
        }
    }

    public getValue() {
        const f = InputTypeValueFormatMap[this.getScopeVal("inputType")];
        const v = this.getScopeVal('value');

        if (v) {
            const m = moment(v, f);
            if (m.isValid()) {
                return m.format(this.prop("format"));
            }
        }

        return "";
    }

    public getTimestamp() {
        const value = this.prop("value");
        const format = this.prop("format");
        if (value) {
            const m = moment(value, format);
            if (m.isValid()) {
                return m.unix();
            } 
        }

        return "";
    }
}