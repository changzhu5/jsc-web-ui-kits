import BaseFormElement from "ui/component/form.element";
import * as $ from "jquery/dist/jquery.min.js";

export default class BaseNumber extends BaseFormElement
{
    public initScope() {
        super.initScope();
        const comp = this;
        this.scope.typing = function(e) {
            e.stopPropagation();
            let value = $(e.target).val().trim();
            if (! comp.setValue(value)) {
                return;
            }
            
            if (e.keyCode == 13 || e.which == 13) {
                comp.trigger("enter");
            }
            if (comp.changed()) {
                comp.trigger("change", comp.initialValue, comp.prop('value'));
            }
        }
    }

    public static template() {
        return `
            <div class="position-relative {{class}}">
                <input class="form-control{{echo invalid ' is-invalid'}}" type="number" min="{{min}}" max="{{max}}" step="{{step}}" mm-input="this.typing(event)" mm-keydown="this.typing(event)" value="{{{value}}}" {{placeholder placeholder}} {{disabled disabled}} {{readonly readonly}}>
                {{#if helpText}}
                <small class="text-muted {{textAlignClass}}">{{{helpText}}}</small>
                {{/if}}
            </div>
        `;
    }

    public static properties() {
        let props = super.properties();
        props["disabled"] = {
            label: "Disabled",
            type: "mmCheckbox",
            default: false
        };
        props["readonly"] = {
            label: "Readonly",
            type: "mmCheckbox",
            default: false
        };
        props["min"] = {
            label: "Min",
            type: "mmTextfield",
            default: 0,
            priority: 2
        };
        props["max"] = {
            label: "Max",
            type: "mmTextfield",
            default: "",
            priority: 2
        };
        props["step"] = {
            label: "Step",
            type: "mmTextfield",
            default: 1
        };
        props["helpText"] = {
            label: "Help text",
            type: "mmTextfield"
        };
        props["textAlign"] = {
            label: "Text alignment",
            type: "mmDropdown",
            props: {
                options: [
                    {label: 'Start', value: 'start'},
                    {label: 'End', value: 'end'}
                ]
            },
            default: "start"
        };
        props["invalid"] = {
            label: "Invalid",
            type: "mmCheckbox",
            default: false
        };

        return props;
    }

    public static events() {
        let events = super.events();

        events['enter'] = {
            "label": "Enter key"
        };

        return events;
    }

    public setValue(val) {
        if (val !== "") {
            val = Number(val);
            if (isNaN(val)) {
                this.setScopeVal("invalid", true);
                return false;
            }
            if (this.prop("min") && val < this.prop("min")) {
                this.setScopeVal("invalid", true);
                return false;
            }
            if (this.prop("max") && val > this.prop("max")) {
                this.setScopeVal("invalid", true);
                return false;
            }
            this.setScopeVal("invalid", false);
        }
        this.setScopeVal("value", val);
        return true;
    }

    public setTextAlign(align) {
        this.setScopeVal("textAlign", align);
        this.setScopeVal("textAlignClass", "float-" + align);
    }
}