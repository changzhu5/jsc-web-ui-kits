import * as $ from "jquery/dist/jquery.min.js";
import BaseFormElement from "ui/component/form.element";
import app from "ui/module/index";

export default class Tabs extends BaseFormElement
{
    public initScope(data: object = null) {
        super.initScope(data);
        const comp = this;
        this.scope.click = function(e) {
            e.preventDefault();
            e.stopPropagation();
            const index = $(e.target).closest(".nav-item").attr("data-index");
            comp.prop("active", this.tabs[index].value);
            comp.trigger("click", this.tabs[index].value);
        }
    }

    public static template() {
        return `
            <div class="{{class}}">
                <ul class="nav nav-tabs">
                    {{#each tabs as |tab|}}
                    <li class="nav-item" data-index="{{@index}}">
                        <a class="nav-link  {{echo tab.disabled 'disabled'}} {{echo (equal tab.value ../active) 'active'}}" href="#{{tab.value}}" mm-click="this.click(event)">
                            {{#if tab.icon}}
                            <i class="fa fa-{{tab.icon}}"></i>
                            {{/if}}
                            {{tab.label}}
                            {{#if tab.badge}}
                            <label class="badge bg-danger">{{tab.badge.label}}</label>
                            {{/if}}
                        </a>
                    </li>
                    {{/each}}
                </ul>
                <div class="tab-content p-2 border border-top-0">
                    {{#each tabs as |tab|}}
                    <div class="tab-pane fade {{echo (equal tab.value ../active) 'show active'}}">
                        {{#if (get @root/components tab.value)}}
                        {{#with (get @root/components tab.value) as |c|}}
                        <mm-component name="{{c.name}}" type="{{c.type}}"></mm-component>
                        {{/with}}
                        {{/if}}
                    </div>
                    {{/each}}
                </div>
            </div>   
        `;
    }

    public static properties() {
        let props = super.properties();
        props['value'].priority = 0;
        props['tabs'] = {
            label: "Tabs",
            type: "mmRepeater",
            priority: 2,
            props: {
                columns: [
                    {
                        key: "label",
                        label: "Label",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "value",
                        primary: true,
                        label: "Value",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "disabled",
                        label: "Disabled",
                        component: {
                            type: "mmCheckbox"
                        }
                    },
                    {
                        key: "icon",
                        label: "Icon",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "content",
                        label: "Content",
                        component: {
                            type: "mmCodeEditor"
                        }
                    }
                ]
            }
        };
        props["active"] = {
            label: "Active",
            type: "mmTextfield"
        };

        return props;
    }

    public static events() {
        let events = super.events();
        events['click'] = {
            label: "Tab click"
        }

        return events;
    }

    public setValue(value) {
        const tabs = this.prop("tabs");
        if (! tabs) {
            return;
        }
        tabs.forEach(function(tab) {
            const key = tab.value;
            const content = this.getTabContent(key);
            if (value[key] && content instanceof BaseFormElement) {
                content.prop('value', value[key]);
            }
        }, this);
    }

    public getValue() {
        const tabs = this.prop("tabs");
        if (! tabs) {
            return "";
        }

        let value = {};
        tabs.forEach(function(tab) {
            const key = tab.value;
            const content = this.getTabContent(key);
            if (content instanceof BaseFormElement) {
                value[key] = content.prop('value');
            }
        }, this);

        return Object.keys(value).length > 0 ? value : "";
    }

    public setTabs(tabs) {
        this.setScopeVal("tabs", tabs);
        for (const tab of tabs) {
            if (! tab.value) {
                throw "tab.value is required";
            }
            if (! this.get(tab.value)) {
                let c = app.create({
                    type: "mmContent",
                    props: {
                        content: tab.content ? tab.content : ""
                    }
                });
                this.add(c, tab.value);
            } else {
                this.get(tab.value).prop("content", tab.content ? tab.content : "");
            }
        }
    }

    public addTab(tab, index) {
        let tabs = this.prop("tabs");
        if (! tabs) {
            tabs = [];
        }
        if (index <= 0) {
            tabs = [tab].concat(tabs);
        } else if (index >= tabs.length) {
            tabs.push(tab);
        } else {
            tabs.splice(index, 0, tab);
        }
        this.prop("tabs", tabs);
    }

    public removeTab(value) {
        let removedTabs = [];
        let tabs = this.prop("tabs");
        if (tabs)  {
            for (const tab of tabs) {
                if (tab.value !== value) {
                    removedTabs.push(tab);
                }
            }
            this.prop("tabs", removedTabs);
        }
    }

    public getTabContent(value) {
        const content = this.get(value).prop("content");
        if (this.isString(content)) {
            return content;
        }
        return this.get(value).get("content");
    }
}