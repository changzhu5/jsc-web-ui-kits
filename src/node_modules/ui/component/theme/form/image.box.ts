import BaseFormElement from "ui/component/form.element";
import app from "ui/module/index";
import * as $ from "jquery/dist/jquery.min.js";

let popup = null;

export default class ImageBox extends BaseFormElement
{
    public constructor(options) {
        if (options.props == null) {
            options.props = {};
        }
        options.props.components = {
            file: {
                type: "mmFile",
                props: {
                    class: "d-none"
                }
            }
        };
        super(options);
        if (! popup) {
            popup = app.create({
                type: "mmModal",
                props: {
                    content: {
                        type: "mmTextfield"
                    }
                },
                on: {
                    click: function(action) {
                        const iBox = this.parent;
                        const value = this.findOne("mmTextfield").prop("value");
                        if (action == 'ok') {
                            if (iBox.getScopeVal("isOnEditValue")) {
                                iBox.prop('value', {
                                    data: value
                                });
                            } else if (iBox.getScopeVal("isOnEditCaption")) {
                                iBox.prop('caption', value);
                            }
                        }
                        iBox.setScopeVal("isOnEditValue", false);
                        iBox.setScopeVal("isOnEditCaption", false);
                    }
                }
            }, $("body"));
        }
    }
    public initScope() {
        const comp = this;
        super.initScope();
        this.scope.isOnEditCaption = false;
        this.scope.isOnEditValue = false;
        this.scope.upload = function(e) {
            e.stopPropagation();
            e.preventDefault();
            const file = comp.get("file");
            file.onChange = function(oldValue, value) {
                comp.setScopeVal("value", value);
                if (value && value.data) {
                    comp.element.find("img").attr('src', value.data);
                }
            }
            file.element.find("input").trigger("click");
        }
        this.scope.remove = function(e) {
            e.stopPropagation();
            e.preventDefault();
            const value = comp.initialValue ? comp.initialValue : "";
            comp.prop("value", value);
        }
        this.scope.showEdit = function(e) {
            e.stopPropagation();
            e.preventDefault();
            this.isOnEditValue = true;
            popup.props({
                label: "Edit Value",
                visible: true
            }).apply();
            const value = comp.prop("value");
            const t = value.name == null ? value.data : value.name;
            popup.findOne("mmTextfield").prop('value', t);
            popup.parent = comp;
        }
        this.scope.cap = function(e) {
            e.stopPropagation();
            e.preventDefault();
            this.isOnEditCaption = true;
            popup.props({
                label: "Edit Caption",
                visible: true
            }).apply();
            popup.findOne("mmTextfield").prop('value', comp.prop('caption'));
            popup.parent = comp;
        }
    }
    
    public static template() {
        return `
            <div class="card {{class}}" style="width: {{size}}px">
                <div class="position-relative text-center">
                    <img alt="" class="img-thumbnail border-0" src="{{{echo value value.data (concat 'https://via.placeholder.com/' size)}}}">
                    <div class="position-absolute w-100 h-100 start-0 top-0 d-flex justify-content-center align-items-center hover-overlay">
                        <span>
                            <a href="#" class="btn btn-icon btn-default btn-sm bg-dark" mm-click="this.upload(event)"><i class="fa fa-upload"></i></a>
                            {{#if edit}}
                            <a href="#" class="btn btn-icon btn-default btn-sm bg-dark" mm-click="this.showEdit(event)"><i class="fa fa-i-cursor"></i></a>
                            {{/if}}
                            <a href="#" class="btn btn-icon btn-default btn-sm bg-dark" mm-click="this.remove(event)"><i class="fa fa-times"></i></a>
                        </span>
                    </div>
                </div>
                {{#if caption}}
                <div class="p-1 text-center {{capClass}}">
                    {{{caption}}} <a href="" mm-click="this.cap(event)"><i class="fa fa-edit"></i></a>
                </div>
                {{else}}
                <div class="p-1 text-center {{capClass}}">
                    Unnamed <a href="" mm-click="this.cap(event)"><i class="fa fa-edit"></i></a>
                </div>
                {{/if}}
                <mm-component name="{{components.file.name}}" type="{{components.file.type}}"></mm-component>
            </div>
        `;
    }

    public static properties() {
        let props = super.properties();

        props["size"] = {
            label: "Size",
            type: "mmTextfield",
            default: 300
        };

        props["caption"] = {
            label: "Caption",
            type: "mmTextfield"
        };

        props["capClass"] = {
            label: "Caption Class",
            type: "mmTextfield"
        };

        props["edit"] = {
            label: "Edit",
            type: "mmCheckbox",
            default: true
        };

        return props;
    }
}