import BaseFormElement from "ui/component/form.element";
import * as $ from "jquery/dist/jquery.min.js";

export default class Textfield extends BaseFormElement
{
    public initScope() {
        super.initScope();
        const comp = this;
        this.scope.typing = function(e) {
            e.stopPropagation();
            comp.setScopeVal("value", $(e.target).val());
            
            if (e.keyCode == 13 || e.which == 13) {
                comp.trigger("enter");
            }
            if (comp.changed()) {
                comp.trigger("change", comp.initialValue, comp.prop("value"));
            }
        }
        this.scope.blur = function(e) {
            e.stopPropagation();
            comp.setScopeVal("value", $(e.target).val());
            if (comp.changed()) {
                comp.trigger("change", comp.initialValue, comp.prop("value"));
            }
        }
    }

    public static template() {
        return `
            <div class="position-relative {{class}}">
                <input class="form-control{{echo icon ' pe-4'}}{{echo invalid ' is-invalid'}}" type="{{echo password 'password' 'text'}}" mm-keyup="this.typing(event)" mm-blur="this.blur(event)" value="{{{value}}}" {{placeholder placeholder}} {{disabled disabled}} {{readonly readonly}} {{echo focus 'mm-has-focus'}}>
                {{#if helpText}}
                <small class="text-muted {{textAlignClass}}">{{{helpText}}}</small>
                {{/if}}
                {{#if icon}}
                <i class="position-absolute end-0 me-2 top-50 translate-middle-y fa fa-{{icon}}"></i>
                {{/if}}
            </div>
        `;
    }

    public static properties() {
        let props = super.properties();

        props["value"]["type"] = "mmTextfield";

        props["placeholder"] = {
            label: "Placeholder",
            type: "mmTextfield"
        };

        props["password"] = {
            label: "Password",
            type: "mmCheckbox",
            default: false
        };
        props["disabled"] = {
            label: "Disabled",
            type: "mmCheckbox",
            default: false
        };

        props["readonly"] = {
            label: "Readonly",
            type: "mmCheckbox",
            default: false
        };

        props["helpText"] = {
            label: "Help text",
            type: "mmTextfield"
        };

        props["textAlign"] = {
            label: "Text alignment",
            type: "mmDropdown",
            props: {
                options: [
                    {label: 'Start', value: 'start'},
                    {label: 'End', value: 'end'}
                ]
            },
            default: "start"
        };

        props["invalid"] = {
            label: "Invalid",
            type: "mmCheckbox",
            default: false
        };

        props["focus"] = {
            label: "Focus",
            type: "mmCheckbox",
            default: false,
            priority: 0
        };

        props["icon"] = {
            label: "Icon",
            type: "mmTextfield"
        };

        return props;
    }

    public static events() {
        let events = super.events();
        events['enter'] = {
            "label": "Enter key"
        };
        return events;
    }

    public setTextAlign(align) {
        this.setScopeVal("textAlign", align);
        this.setScopeVal("textAlignClass", "float-" + align);
    }
}