import * as $ from "jquery/dist/jquery.min.js";
import BaseFormElement from "ui/component/form.element";

export default class Tags extends BaseFormElement
{
    public initScope() {
        const comp = this;
        super.initScope();
        this.scope.removeTag = function(e) {
            e.preventDefault();
            let tags = [];
            let index = $(e.target).attr('data-index');
            for (let i = 0; i < this.tags.length; i++) {
                if (i != index) {
                    tags.push(this.tags[i]);
                } else {
                    comp.trigger("remove", tags[i]);
                }
            }
            comp.prop("value", tags);
            this.focus();
        }

        this.scope.addTag = function(e) {
            let code = e.keyCode || e.which;
            if (code == 13) {
                let tag = $(e.target).val();
                this.tags.push(tag);
                
                comp.apply();
                this.focus();
                
                comp.trigger('add', tag);
            }
        }
        this.scope.focus = function() {
            if (comp.element) {
                comp.element.find("input").focus();
            }
        } 
    }

    public static template() {
        return `
            <div class="input-group p-1 border">
                {{#each tags}}
                <span class="badge bg-secondary me-1 d-flex align-items-center rounded">
                    <span>{{{this}}}</span>
                    {{#if (not @root/disabled)}}
                    <a class="ms-1 text-light text-decoration-none" href="" title="Removing tag" mm-click="this.removeTag(event)" data-index="{{@index}}">X</a>
                    {{/if}}
                </span>
                {{/each}}
                <input type="text" class="form-control d-inline-block border-0 ps-1" {{echo disabled 'disabled'}} mm-keydown="this.addTag(event)">
            </div>
        `;
    }

    public static properties() {
        let props = super.properties();
        props['disabled'] = {
            label: 'Disabled',
            type: 'mmCheckbox',
            default: false
        };

        return props;
    }

    public static events() {
        let events = super.events();
        events["add"] = {
            label: "Add event"
        };
        events["remove"] = {
            label: "Remove event"
        };

        return events;
    }
    
    public getValue() {
        let tags =  this.getScopeVal('tags');
        if (tags.length == 0) {
            return "";
        }

        return tags;
    }

    public setValue(val: any) {
        if (! val) {
            val = [];
        }
        
        this.setScopeVal('tags', val);
    }

    public changed() {
        let oldValue = this.initialValue;
        let newValue = this.prop("value");
        if (! oldValue) {
            oldValue = [];
        }
        if (! newValue) {
            newValue = [];
        }
        if (oldValue.length !== newValue.length) {
            return true;
        }
        let changed = false;
        newValue.forEach(function(v) {
            if (oldValue.indexOf(v) < 0) {
                changed = true;
            }
        });

        return changed;
    }
}