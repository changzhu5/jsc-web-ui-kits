import app from "ui/module/index";
import BaseLayout from "ui/component/layout";
import BaseFormElement from "ui/component/form.element";

export default class Form extends BaseFormElement
{
    public constructor(options) {
        if (! options.props) {
            options.props = {};
        }
        options.props.components = {
            heading: {
                type: "mmHeading",
                props: {
                    class: "mb-4",
                    size: 5
                }
            },
            error: {
                type: "mmAlert",
                props: {
                    visible: false
                }
            }
        };
        if (! options.props.layout) {
            options.props.layout = {
                type: "mmGrid",
                props: {
                    class: "gy-3"
                }
            };
        }
        super(options);
        if (options.props.value) {
            this.commits();
        }
    }
    
    public static template() {
        return `
            <div class="{{class}}">
                {{#if components.top}}
                <mm-component name="{{components.top.name}}" type="{{components.top.type}}"></mm-component>
                {{/if}}
                {{#if label}}
                <mm-component name="{{components.heading.name}}" type="{{components.heading.type}}"></mm-component>
                {{/if}}
                {{#if error}}
                <mm-component name="{{components.error.name}}" type="{{components.error.type}}"></mm-component>
                {{/if}}
                {{#if components.content}}
                <div><mm-component name="{{components.content.name}}" type="{{components.content.type}}"></div>
                {{/if}}
                {{#if components.bottom}}
                <mm-component name="{{components.bottom.name}}" type="{{components.bottom.type}}"></mm-component>
                {{/if}}
            </div>
        `;
    }

    public static properties() {
        let props = super.properties();
        props["label"] = {
            label: "Label",
            type: "mmTextfield"
        };
        props["error"] = {
            label: "Error",
            type: "mmTextfield"
        };
        props["layout"] = {
            label: "Layout",
            type: "mmCodeEditor",
            priority: 3
        };
        props["elements"] = {
            label: "Elements",
            type: "mmCodeEditor",
            priority: 2
        };
        props["value"] = {
            label: "Value",
            type: "mmCodeEditor"
        };
        props["top"] = {
            label: "Top Component",
            type: "mmComponentForm",
            priority: 2
        };
        props["bottom"] = {
            label: "Bottom Component",
            type: "mmComponentForm",
            priority: 2
        };

        return props;
    }

    public setLayout(layout) {
        if (layout instanceof BaseLayout) {
            this.add(layout, "content");
        } else if (this.isObject(layout)) {
            let comp = app.create(layout);
            if (comp instanceof BaseLayout) {
                this.add(comp, "content");
            } else {
                throw "Invalid layout config";
            }
        }
    }

    public setElements(elements) {
        const oldElements = this.getScopeVal("elements");
        if (oldElements) {
            oldElements.forEach(function(ele) {
                let name = this.name + "|" + ele.comp.name;
                let type = ele.comp.type;
                if (app.component(name, type)) {
                    app.component(name, type).destroy();
                }
            }, this);
        }
        this.setScopeVal("elements", this.copy(elements));
        elements.forEach(function(ele) {
            if (ele.comp.name === undefined) {
                throw "Element name is required";
            }
            ele.comp.name = this.name + "|" + ele.comp.name;
            if (! ele.comp.options) {
                ele.comp.options = {};
            }
            ele.comp.options.overrideOnApply = false;
        }, this);
        const layout = this.get("content");
        layout.prop("components", elements);
    }

    public setTop(config) {
        this.setScopeVal("top", this.copy(config));
        if (this.get("top")) {
            this.get("top").destroy();
        }
        this.add(app.create(config), "top");
    }

    public setBottom(config) {
        this.setScopeVal("bottom", this.copy(config));
        if (this.get("bottom")) {
            this.get("bottom").destroy();
        }
        this.add(app.create(config), "bottom");
    }

    public getElementList() {
        return this.get("content").getComponentList();
    }

    public getElement(name) {
        const elements = this.prop("elements");
        for (const element of elements) {
            if (element.comp.name === name) {
                return app.component(this.name + "|" + name, element.comp.type);
            }
        }

        return "";
    }

    public setLabel(label) {
        this.get("heading").prop("label", label);
        this.setScopeVal("label", label);
    }

    public setError(error) {
        this.get("error").props({
            description: error,
            visible: error ? true : false
        }).apply();
        this.setScopeVal("error", error);
    }

    public changed() {
        const components = this.get("content").getComponentList();
        for (const comp of components) {
            if (! (comp instanceof BaseFormElement)) {
                continue;
            }
            if (comp.changed()) {
                return true;
            }
        }

        return false;
    }

    public getChange() {
        let data = {};
        const components = this.get("content").getComponentList();
        for (const comp of components) {
            if (! (comp instanceof BaseFormElement)) {
                continue;
            }
            if (comp.changed()) {
                let key = comp.name.substring(this.name.length + 1);
                data[key] = comp.prop("value");
            }
        }
        if (Object.keys(data).length === 0) {
            return "";
        }
        return data;
    }

    public getValue() {
        let data = {};
        const components = this.get("content").getComponentList();
        for (const comp of components) {
            let key = comp.name.substr(this.name.length + 1);
            if (comp instanceof BaseFormElement) {
                data[key] = comp.prop("value");
            }
        }
        
        return Object.keys(data).length > 0 ? data : "";
    }

    public setValue(data) {
        if (this.isObject(data)) {
            for (const [key, value] of Object.entries(data)) {
                if (this.getElement(key)) {
                    this.getElement(key).prop("value", value);
                }
            }
        }
    }

    public commits() {
        const list = this.getElementList();
        if (list) {
            list.forEach(function(ele) {
                if (ele instanceof BaseFormElement) {
                    ele.commit();
                }
            });
        }
    }

    public reset() {
        const list = this.getElementList();
        if (list) {
            list.forEach(function(ele) {
                if (ele instanceof BaseFormElement) {
                    ele.reset();
                }
            });
        }
    }
}