import BaseFormElement from "ui/component/form.element";
import app from "ui/module/index";
import BaseContainer from "ui/component/container";
import BaseLayout from "ui/component/layout";
import * as $ from "jquery/dist/jquery.min.js";

declare const Promise;

export default class ComponentForm extends BaseFormElement {
    public constructor(options) {
        const components = new Map();
        const excludedProps = Object.keys(app.getComponentDef("mmComponent").properties()).filter((val) => {
            return val !== "class";
        });
        let component = null;
        const getFormElements = function(type) {
            let properties = app.getComponentDef(type).properties();
            let elements = [];
            let isContainer = component instanceof BaseContainer;
            let isLayout = component instanceof BaseLayout;
            let isFormElement = component instanceof BaseFormElement;
            for (const [name, option] of Object.entries(properties)) {
                if (excludedProps.indexOf(name) > -1) {
                    continue;
                }
                if (name === "components" && isFormElement) {
                    continue;
                }
                if (name === "components" && isContainer) {
                    continue;
                }
                let comp = component.copy(option);
                let value = component.prop(name);
                if (! comp.props) {
                    comp.props = {};
                }
                comp.props.value = value;
                
                comp.name = name;
                let item = {
                    comp: comp,
                    option: {
                        label: comp.label
                    }
                };
                if (comp.type == "mmCheckbox") {
                    item.option["class"] = "d-flex flex-row-reverse justify-content-end";
                }
                if (comp.type == "mmForm") {
                    comp.props.class = "p-2 border";
                }
                if (comp.type == "mmRepeater") {
                    comp.props.isSingleColumn = true;
                }
                
                elements.push(item);

                delete comp.priority;
                delete comp.default;
                delete comp.label;
            }
            
            return elements;
        }
        if (! options.props) {
            options.props = {};
        }
        options.props.components = {
            main: {
                type: 'mmGrid',
                props: {
                    class: "gy-2",
                    components: [
                        {
                            comp: {
                                type: "mmTextfield",
                                props: {
                                    placeholder: "Name"
                                }
                            }
                        },
                        {
                            comp: {
                                type: "mmDropdown",
                                props: {
                                    placeholder: "Type",
                                    options: function() {
                                        return new Promise(function(resolve) {
                                            resolve(app.getCompSelectOptions());
                                        });
                                    }
                                },
                                on: {
                                    change: function(oldValue, newValue) {
                                        const tab = this.parent.get(2);
                                        const propsForm = tab.getTabContent("props");
                                        const onForm = tab.getTabContent("on");
                                        
                                        if (newValue) {
                                            component = components.has(newValue) ? components.get(newValue) : components.set(newValue, app.create({type: newValue}, $("#homeless"))).get(newValue);
                                            propsForm.prop("elements", getFormElements(newValue));
                                            tab.prop("class", "");
                                        } else {
                                            component = null;
                                            propsForm.prop("elements", []);
                                            onForm.prop("value", "");
                                            tab.prop("class", "d-none");
                                        }
                                    }
                                }
                            }
                        },
                        {
                            comp: {
                                type: "mmTabs",
                                props: {
                                    class: "d-none",
                                    active: "props",
                                    tabs: [
                                        {
                                            label: "Properties",
                                            value: "props",
                                            content: {
                                                type: "mmForm"
                                            }
                                        },
                                        {
                                            label: "Event Listeners",
                                            value: "on",
                                            content: {
                                                type: "mmRepeater",
                                                props: {
                                                    isSingleColumn: true,
                                                    columns: [
                                                        {
                                                            key: "name",
                                                            label: "Name",
                                                            primary: true,
                                                            component: {
                                                                type: "mmDropdown",
                                                                props: {
                                                                    options: function() {
                                                                        return new Promise(function(resolve) {
                                                                            if (! component) {
                                                                                resolve([]);
                                                                            } else {
                                                                                options = [];
                                                                                for (const [key, value] of Object.entries(app.getComponentDef(component.type).events())) {
                                                                                    options.push({
                                                                                        value: key,
                                                                                        label: key
                                                                                    });
                                                                                }
                                                                                resolve(options);
                                                                            }
                                                                        });
                                                                    }
                                                                },
                                                                on: {
                                                                    change: function(oldValue, newValue) {
                                                                        const repeater = this.parent;
                                                                        const funcComp = repeater.getNextColComponent(this);
                                                                        
                                                                        if (newValue) {
                                                                            const eventInfo = app.getComponentDef(component.type).events()[newValue];
                                                                            const params = eventInfo.params ? Object.keys(eventInfo.params) : "";
                                                                            funcComp.prop('value', {
                                                                                params: params,
                                                                                body: ""
                                                                            });
                                                                        } else {
                                                                            funcComp.prop('value', {
                                                                                params: "",
                                                                                body: ""
                                                                            });
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            key: "function",
                                                            label: "",
                                                            component: {
                                                                type: "mmFunction",
                                                                on: {
                                                                    apply: function() {
                                                                        this.get('main').get(0).prop('disabled', true);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        };
        super(options);
    }

    public static properties() {
        let props = super.properties();
        props['value'].priority = 0;
        props['value'].type = 'mmCodeEditor';

        return props;
    }

    public setValue(value) {
        const nameInput = this.get('main').get(0);
        const typeInput = this.get('main').get(1);
        if (! value) {
            nameInput.prop('value', '');
            typeInput.prop('value', '');
            return;
        }
        const tab = this.get('main').get(2);
        const propsForm = tab.getTabContent("props");
        const onForm = tab.getTabContent("on");
        const events = app.getComponentDef(value.type).events();
        
        typeInput.prop('value', value.type);

        if (value.name) {
            nameInput.prop('value', value.name);
        }
        if (value.props) {
            propsForm.prop('value', value.props);
        }
        if (value.on) {
            onForm.prop('value', value.on);
        }
    }

    public getValue() {
        const nameInput = this.get('main').get(0);
        const typeInput = this.get('main').get(1);
        const tab = this.get('main').get(2);
        const propsForm = tab.getTabContent("props");
        const onForm = tab.getTabContent("on");

        let value = {
            type: typeInput.prop('value')
        };
        if (nameInput.prop('value')) {
            value['name'] = nameInput.prop('value');
        }
        if (propsForm.prop('value')) {
            value['props'] = propsForm.prop('value');
        }
        if (onForm.prop('value')) {
            value['on'] = onForm.prop('value');
        }

        return value;
    }
}