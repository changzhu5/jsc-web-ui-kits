import BaseFormElement from "ui/component/form.element";
import app from "ui/module/index";
import * as $ from "jquery/dist/jquery.min.js";
import DataMeta from "ui/module/data.meta";

export default class Repeater extends BaseFormElement
{
    public change = {};

    public defaultRow = {};

    public initScope() {
        const comp = this;
        super.initScope();
        this.scope.edits = [];
        this.scope.map = {
            0: true
        };
        this.scope.collapse = function(e) {
            e.stopPropagation();
            const btn = $(e.target).closest("button");
            const row = btn.closest(".data-row");
            const index = parseInt(row.attr("data-index"));
            if (btn.find("i").hasClass("fa-minus")) {
                row.children().eq(1).addClass("d-none");
                btn.find("i").removeClass("fa-minus").addClass("fa-plus");
                this.map[index] = false;
            } else {
                row.children().eq(1).removeClass("d-none");
                btn.find("i").removeClass("fa-plus").addClass("fa-minus");
                this.map[index] = true;
            }
        }
        this.scope.plus = function(e) {
            e.stopPropagation();
            let value = comp.prop("value");
            if (! value) {
                value = [];
            }
            let row = comp.copy(comp.defaultRow);
            value.push(row);
            this.map[value.length - 1] = true;
            comp.prop("value", value);
        }
        this.scope.minus = function(e) {
            e.stopPropagation();
            let rowIndex = parseInt($(e.target).closest(".data-row").attr("data-index"));
            let cols = comp.prop("columns");
            cols.forEach(function(col, index) {
                if (col.editable()) {
                    let config = col.getComponent();
                    let name = comp.name + rowIndex + ":" + index;
                    let type = config.type;
                    if (app.component(name, type)) {
                        app.component(name, type).destroy();
                    }
                }
            });
            let value = comp.prop("value");
            let newValue = [];
            for (let i = 0; i < value.length; i++) {
                if (i != rowIndex) {
                    newValue.push(value[i]);
                }
            }
            comp.prop("value", newValue);
        }
        this.scope.draghandler = function() {
            let value = comp.prop('value');
            let newValue = [];
            if (this.dragFrom > this.dragTo) {
                for (let i = 0; i < this.dragTo; i++) {
                    newValue.push(value[i]);
                }
                newValue.push(value[this.dragFrom]);
                for (let i = this.dragTo; i < this.dragFrom; i++) {
                    newValue.push(value[i]);
                }
                for (let i = this.dragFrom + 1; i < value.length; i++) {
                    newValue.push(value[i]);
                }
            } else {
                for (let i = 0; i < this.dragFrom; i++) {
                    newValue.push(value[i]);
                }
                for (let i = this.dragFrom + 1; i <= this.dragTo; i++) {
                    newValue.push(value[i]);
                }
                newValue.push(value[this.dragFrom]);
                for (let i = this.dragTo + 1; i < value.length; i++) {
                    newValue.push(value[i]);
                }
            }
            
            comp.prop('value', newValue);
        }
    }
    public static template() {
        return `
            {{#if (not isSingleColumn)}}
            <table class="table border {{class}}">
                <thead class="table-light">
                    <tr>
                        <th></th>
                        {{#each columns}}
                        {{#if (call 'editable' this)}}
                        <th class="align-middle" style="width: {{echo this.width this.width 'auto'}}">{{{call 'getLabel' this}}}</th>
                        {{/if}}
                        {{/each}}
                        <th class="align-middle fit">
                            <button class="btn btn-icon btn-secondary btn-sm" type="button" mm-click="this.plus(event)"><i class="fa fa-plus"></i></button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    {{#each value}}
                    <tr class="data-row" data-index="{{@index}}" mm-draggable="draghandler">
                        <td class="align-middle fit" mm-drag-handler><i class="fa fa-expand-arrows-alt"></i></td>
                        {{#each ../columns}}
                        {{#if (call 'editable' this)}}
                        <td class="align-middle" mm-no-drag><mm-component class="mm-column-comp-handler" name="{{concat ../../name ':' @../index ':' @index}}" type="{{this.component.type}}"></mm-component></td>
                        {{/if}}
                        {{/each}}
                        <td class="mm-no-drag align-middle">
                            <button class="btn btn-icon btn-secondary btn-sm" type="button" mm-click="this.minus(event)"><i class="fa fa-minus"></i></button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
            {{else}}
            <div class="d-flex flex-column {{echo (isEmpty value) 'border'}} {{class}}">
                {{#each value}}
                <div class="data-row" data-index="{{@index}}">
                    <div class="p-2 border d-flex align-items-center w-100 justify-content-between bg-light bg-gradient" data-index="{{@index}}" mm-draggable="draghandler" mm-drag-handler>
                        <div class="d-flex align-items-center">
                            <button type="button" class="btn btn-sm btn-secondary-outline border border-secondary me-2" mm-click="this.collapse(event)"><i class="fa fa-{{echo (get ../map @index) 'minus' 'plus'}}"></i></button>
                            <small>#{{inc @index}}</small>
                        </div>
                        <button type="button" class="btn btn-sm btn-secondary" mm-click="this.minus(event)"><i class="fa fa-trash"></i></button>
                    </div>
                    <div class="mm-no-drag border border-top-0 {{echo @last '' 'border-bottom-0'}} p-3 {{echo (get ../map @index) '' 'd-none'}}">
                        <div class="row">
                            {{#each ../columns}}
                            {{#if (call 'editable' this)}}
                            <div class="col-sm-12 mb-3">
                                {{#if (call 'getLabel' this)}}
                                <label class="form-label">{{{call 'getLabel' this}}}</label>
                                {{/if}}
                                <mm-component class="mm-column-comp-handler" name="{{concat ../../name ':' @../index ':' @index}}" type="{{this.component.type}}"></mm-component>
                            </div>
                            {{/if}}
                            {{/each}}
                        </div>
                    </div>
                </div>
                {{/each}}
                
                <div class="text-center p-4 {{echo (isNotEmpty value) 'border border-top-0'}}"><button type="text" class="btn btn-sm btn-primary" mm-click="this.plus(event)">Add New</button></div>
            </div>
            {{/if}}   
        `;
    }

    public static properties() {
        let props = super.properties();
        props['columns'] = {
            label: "DataMeta[]",
            type: "mmCodeEditor",
            priority: 2
        };
        props['isSingleColumn'] = {
            label: "Is single column",
            type: "mmCheckbox",
            default: false
        };

        return props;
    }

    public setColumns(metas) {
        if (! this.isArray(metas)) {
            throw "Invalid metas for repeater#" + this.name;
        }
        this.defaultRow = {};
        let hasPrimaryMeta = false;
        for (let i = 0; i < metas.length; i++) {
            if (! (metas[i] instanceof DataMeta)) {
                metas[i] = new DataMeta(metas[i]);
            }
            if (metas[i].primary) {
                this.setScopeVal("pMeta", metas[i]);
                hasPrimaryMeta = true;
            }
            
            if (metas[i].getValue()) {
                const key = metas[i].getName();
                if (this.defaultRow[key] === undefined) {
                    this.defaultRow[key] = {};
                }
                this.defaultRow[key] = metas[i].getValue();
            }
        }
        if (! hasPrimaryMeta) {
            throw "Primary meta is not set";
        }
        this.setScopeVal("columns", metas);
    }

    public setValue(val) {
        this.setScopeVal('edits', []);
        if (! this.isArray(val)) {
            val = [];
        }
        let components = this.getScopeVal("comps");
        let c = this;
        if (this.isArray(components)) {
            components.forEach(function(comp) {
                if (comp.element) {
                    comp.destroy();
                }
            });
        }
        if (val.length > 0) {
            components = [];
            let columns = this.prop("columns");
            let prefix = this.name + ":";
            val.forEach(function(row, rowIndex) {
                columns.forEach(function(col, colIndex) {
                    if (! col.editable()) {
                        return;
                    }
                    let config = col.getComponent();
                    config.name = prefix + rowIndex + ":" + colIndex;
                    if (! config.props) {
                        config.props = {};
                    }
                    config.props.value = col.getTable() ? row[col.getTable()][col.getKey()] : row[col.getKey()];
                    let comp = app.create(config);
                    if (! (comp instanceof BaseFormElement)) {
                        throw `${col.getName()} is not BaseFormElement`;
                    }
                    comp.parent = c;
                    components.push(comp);
                    
                    comp.on('change', function(oldValue, newValue) {
                        let edits = c.getScopeVal("edits");
                        edits.push([rowIndex, colIndex, newValue]);
                        c.setScopeVal("edits", edits);
                    });
                }, this);
            }, this);
            this.setScopeVal("comps", components);
        }
        this.setScopeVal("value", val);
    }

    public getValue() {
        if (this.element.find(".data-row").length > 0) {
            let values = [];
            let comp = this;
            let columns = comp.prop("columns");
            this.element.find('.data-row').each(function(index) {
                let row = {};
                let comps = $(this).find(".mm-column-comp-handler");
                for (let i = 0; i < comps.length; i++) {
                    let compDom = comps.eq(i);
                    let c = app.component(compDom.attr("data-component-name"), compDom.attr("data-component-type"));
                    let parts = c.name.split(":");
                    let colIndex = parts.pop();
                    let meta = columns[colIndex];
                    if (meta.getTable() && row[meta.getTable()] === undefined) {
                        row[meta.getTable()] = {};
                    }
                    if (meta.getTable()) {
                        row[meta.getTable()][meta.getKey()] = c.prop("value");
                    } else {
                        row[meta.getKey()] = c.prop("value");
                    }
                }
                values[index] = row;
            });
            return values;
        } else {
            return "";
        }
    }

    public changed() {
        let value = this.prop("value");
        if (typeof(this.initialValue) !== typeof(value)) {
            return true;
        }
        if (value === "" && this.initialValue === "") {
            return false;
        }
        if (this.initialValue.length !== value.length) {
            return true;
        }
        const edits = this.getScopeVal("edits");
        const columns = this.prop("columns");
        for (const edit of edits) {
            let col = columns[edit[1]];
            let row = value[edit[0]];
            let initialRow = this.initialValue[edit[0]];
            if (col.getTable() && JSON.stringify(initialRow[col.getTable()][col.getKey()]) !== JSON.stringify(row[col.getTable()][col.getKey()])) {
                return true;
            } else if (! col.getTable() && JSON.stringify(initialRow[col.getKey()]) !== JSON.stringify(row[col.getKey()])) {
                return true;
            }
        }
        return false;
    }

    public getNextColComponent(c) {
        const columns = this.prop('columns');
        let parts = c.name.split(":");
        let colIndex = parseInt(parts.pop());
        let nextColIndex = columns[colIndex + 1] ? colIndex + 1 : 0;
        let meta = columns[nextColIndex];
        let type = meta.getComponent().type;
        parts.push(nextColIndex)
        let name = parts.join(":");

        return app.component(name, type);
    }
}