import BaseFormElement from "ui/component/form.element";
import * as $ from "jquery/dist/jquery.min.js";

export default class Suggestion extends BaseFormElement
{
    public initScope() {
        let comp = this;

        let timer = null;

        super.initScope();

        this.scope.label = "Hi";

        this.scope.template = `
            <ul class="dropdown-menu w-100 {{echo (equal options.length 0) 'd-none'}}">
                {{#each options}}
                <li>
                    <a class="dropdown-item" data-index="{{@index}}" href="#" mm-click="this.select(event)">{{{this.label}}}</a>
                </li>
                {{/each}}
            </ul>
        `;
        
        this.scope.show = function() {
            comp.element.find("ul.dropdown-menu").show();
        }

        this.scope.hide = function() {
            comp.element.find("ul.dropdown-menu").hide();
        }

        this.scope.setOptions = function(options) {
            this.options = options;
            this.apply();
        }

        this.scope.select = function(e, opt) {
            e.preventDefault();
            e.stopPropagation();
            this.hide();
            if (opt == null) {
                opt = this.options[$(e.target).attr("data-index")];
            }
            this.value = opt.value;
            this.label = opt.label;
            this.apply();

            comp.trigger("select", opt);

            if (comp.changed()) {
                comp.trigger("change", comp.initialValue, comp.prop("value"));
            }
        }

        this.scope.search = function(e) {
            var code = e.keyCode || e.which;
            var selectedIndex = -1;
            if (code == 38 && comp.isArray(this.options)) {//arrow up
                if (comp.element.find("li > a.active").length > 0) {
                    selectedIndex = parseInt(comp.element.find("li > a.active").attr("data-index"));
                }
                
                if (selectedIndex == 0 || selectedIndex == -1) {
                    selectedIndex = this.options.length - 1;
                } else {
                    selectedIndex--;
                }
                comp.element.find("li > a.active").removeClass("active");
                comp.element.find("li > a").eq(selectedIndex).addClass('active');

                return;
            }
            if (code == 40 && comp.isArray(this.options)) {//arrow down
                if (comp.element.find("li > a.active").length > 0) {
                    selectedIndex = parseInt(comp.element.find("li > a.active").attr("data-index"));
                }
                
                if (selectedIndex == -1 || selectedIndex == this.options.length - 1) {
                    selectedIndex = 0;
                } else {
                    selectedIndex++;
                }
                comp.element.find("li > a.active").removeClass("active");
                comp.element.find("li > a").eq(selectedIndex).addClass('active');

                return;
            }
            if (code == 13) { //select an option
                if (comp.element.find("li > a.active").length > 0) {
                    selectedIndex = parseInt(comp.element.find("li > a.active").attr("data-index"));
                    this.select(e, this.options[selectedIndex]);
                    return;
                }
            }
            if (timer) {
                clearTimeout(timer);
            }
            
            timer = setTimeout(function() {
                let func = comp.prop("query");
                let s = $(e.target).val();
                if (s && comp.isFunction(func)) {
                    func(s).then(function(options) {
                        comp.scope.label = s;
                        comp.scope.setOptions(options);
                        comp.scope.show();
                    });
                }
            }, 500);
        }
    }

    public static template() {
        return `
            <div class="position-relative {{class}}">
                <input type="text" class="form-control pe-2" {{echo disabled 'disabled'}} mm-bind-value="label" {{placeholder placeholder}} mm-keydown="this.search(event)">
                <mm-template src="template"></mm-template>
                <span class="fa fa-search position-absolute top-50 end-0 me-2 translate-middle-y"></span>
            </div>   
        `;
    }

    public static properties() {
        let props = super.properties();

        props["query"] = {
            label: "Search function",
            type: "mmTextarea",
            priority: 2
        };

        props["placeholder"] = {
            label: "Placeholder",
            type: "mmTextfield",
            default: "Type to search..."
        };

        props["disabled"] = {
            label: "Disabled",
            type: "mmCheckbox",
            default: false
        };

        return props;
    }

    public static events() {
        let events = super.events();
        events["select"] = {
            label: "Select"
        };

        return events;
    }

    public setValue(item) {
        if (item) {
            this.setScopeVal("value", item.value);
            this.setScopeVal("label", item.label);
        } else {
            this.setScopeVal("value", item);
            this.setScopeVal("label", item);
        }   
    }

    public getValue() {
        if (this.getScopeVal("value")) {
            return {
                value: this.getScopeVal("value"),
                label: this.getScopeVal("label")
            }
        }

        return "";
    }

    public changed() {
        const oldValue = this.initialValue ? this.initialValue.value : "";
        const newValue = this.prop("value") ? this.prop("value").value : "";

        return oldValue !== newValue;
    }
}