import BaseFormElement from "ui/component/form.element";
import * as $ from "jquery/dist/jquery.min.js";
import app from "ui/module/index";
import { ComponentType } from "ui/type";

declare let window;

export default class Dropdown extends BaseFormElement
{
    public options;

    public constructor(options: ComponentType) {
        super(options);
        const comp = this;
        app.on("click", function() {
            if (comp.element && comp.prop("open")) {
                comp.prop("open", false);
            }
        });
    }

    public initScope() {
        super.initScope();
        const comp = this;
        this.scope.label = function() {
            let val = comp.getScopeVal("value");
            let options = comp.getScopeVal("options");
            if (val.length <= 0) {
                return comp.getScopeVal("placeholder");
            } else {
                let labels = [];
                if (comp.isArray(options)) {
                    for (let i = 0; i < options.length; i++) {
                        if (val.indexOf(options[i].value) > -1) {
                            labels.push(options[i].label);
                        }
                    }
                }
                return labels.join(", ");
            }
        }
        
        this.scope.toggle = function(e) {
            e.stopPropagation();
            let open = comp.prop("open");
            open = ! open;
            comp.prop("open", open);
        }

        this.scope.clear = function(e) {
            e.stopPropagation();
            comp.props({
                value: "",
                open: false
            }).apply();
        }

        this.scope.select = function(e) {
            e.preventDefault();
            e.stopPropagation();
            if (! this.multiple) {
                let value = $(e.target).attr('value');
                if (value.match(/^\d+$/)) {
                    value = parseInt(value);
                }
                comp.props({
                    value: value,
                    open: false
                }).apply();
            } else {
                let value = [], found = false;
                for (let i = 0; i < this.value.length; i++) {
                    if (this.value[i] == $(e.target).attr('value')) {
                        found = true;
                    } else {
                        value.push(this.value[i]);
                    }
                }
                if (! found) {
                    value.push($(e.target).attr('value'));
                }
                comp.props({
                    value: value,
                    open: true
                }).apply();
            }
        }
    }

    public static template() {
        return `
            <div class="mm-dropdown position-relative {{class}}">
                <button class="w-100 btn btn-light border {{disabled disabled}} btn-{{size}}" mm-click="this.toggle(event)">
                    {{#if hasCloseButton}}
                    <a class="position-absolute top-50 start-0 ms-2 translate-middle-y text-dark" mm-click="this.clear(event)">
                        <i class="fa fa-times"></i>
                    </a>
                    {{/if}}
                    {{{label}}} <span class="fa fa-angle-{{echo open 'up' 'down'}} float-end mt-1"></span>
                </button>
                <ul class="dropdown-menu w-100 mh-800 overflow-y-auto {{echo open 'show'}}">
                    {{#each options}}
                    <li>
                        <a class="dropdown-item {{echo (indexOf this.value ../value) 'active'}}" href="#" mm-click="this.select(event)" value={{this.value}}>{{{this.label}}}</a>
                    </li>
                    {{/each}}
                </ul>
            </div>
        `;
    }

    public static properties() {
        let props = super.properties();
        props['size'] = {
            label: "Size",
            type: "mmDropdown",
            props: {
                options: [
                    {label: "Default", value: ""},
                    {label: "Large", value: "lg"},
                    {label: "Small", value: "sm"},
                    {label: "Extra Small", value: "xs"}
                ]
            },
            default: ""
        };
        props["options"] = {
            label: "Options",
            type: "mmRepeater",
            props: {
                columns: [
                    {
                        key: "label",
                        label: "Label",
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "value",
                        label: "Value",
                        primary: true,
                        component: {
                            type: "mmTextfield"
                        }
                    }
                ]
            }
        };
        props["multiple"] = {
            label: "Multiple",
            type: "mmCheckbox",
            default: false,
            priority: 2
        };
        props["disabled"] = {
            label: "Disabled",
            type: "mmCheckbox",
            default: false
        };
        props["placeholder"] = {
            label: "Placeholder",
            type: "mmTextfield",
            default: "Select"
        };
        props["hasCloseButton"] = {
            label: "Has Close Button",
            type: "mmCheckbox",
            default: true
        };

        props["open"] = {
            label: "Open",
            type: "mmCheckbox",
            default: false
        };

        return props;
    }

    public setOptions(options) {
        let comp = this;
        if (this.isString(options)) {
            window[options]().then(function(data) {
                comp.setScopeVal("options", data);
            });
        } else if (this.isFunction(options)) {
            options().then(function(data) {
                comp.setScopeVal("options", data);
                comp.apply();
            }).catch(function(err) {
                console.log(err.message);
            });
        } else {
            this.setScopeVal("options", options);
        }
        this.options = options;   
    }

    public getOptions() {
        return this.options;
    }

    public setValue(val) {
        if (! this.scope.multiple) {
            if (! val) {
                this.setScopeVal("value", []);    
            } else {
                this.setScopeVal("value", [val]);
            }
        } else if (this.isArray(val)) {
            this.setScopeVal("value", val);
        } else {
            this.setScopeVal("value", []);
        }
    }

    public getValue() {
        let value = this.getScopeVal('value');
        if (! this.scope.multiple) {
            return value[0] !== undefined ? value[0] : "";
        }
        return value;
    }

    public getSelectedOptions() {
        let options = this.getScopeVal("options");
        let values = this.prop("value");
        if (! this.isArray(values)) {
            values = [values];
        }
        let selectedOptions = [];
        for (let i = 0; i < options.length; i++) {
            if (values.indexOf(options[i].value) > -1) {
                selectedOptions.push(options[i]);
            }
        }

        return selectedOptions;
    }
}