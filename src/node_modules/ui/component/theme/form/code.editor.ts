import BaseFormElement from "ui/component/form.element";
import * as $ from "jquery/dist/jquery.min.js";

declare const monaco;

export default class CodeEditor extends BaseFormElement
{   
    public editor;

    public constructor(options) {
        if (! options.options.language) {
            options.options.language = "json";
        }
        if (! options.props) {
            options.props = {};
        }
        options.props.components = {
            editor: {
                type: "mmContent"
            }
        };
        super(options);

        this.editor = null;

        let comp = this;

        let scope = this.scope;

        let option = {
            language: options.options.language,
            theme: "vs",
            readOnly: comp.prop("readonly"),
            automaticLayout: true,
            renderLineHighlight: "none",
            minimap: {
                enabled: false
            },
            scrollbar: {
                vertical: comp.prop("scrollable") ? "visible" : "hidden",
                handleMouseWheel: comp.prop("scrollable") ? true : false
            },
            lineNumbers: comp.prop("lineNumbers"),
            wordWrap: "on",
            scrollBeyondLastLine: comp.prop("scrollable") ? true : false
        };
        
        let container = comp.get('editor').element.get(0);
        
        let editor = monaco.editor.create(container, option);

        monaco.editor.setModelMarkers(editor.getModel(), options.options.language, []);
    
        //Set Auto save
        let timer = null;
        
        editor.onDidChangeModelContent(function(e) {
            comp.setScopeVal("value", editor.getValue());
            if (comp.changed()) {
                comp.trigger("change", comp.initialValue, comp.prop("value"));
            }
            
            if (timer) {
                clearTimeout(timer);
                timer = null;
            }
            timer = setTimeout(function() {
                scope.triggerAutoSave();
                clearTimeout(timer);
                timer = null;
            }, 1000);
        });

        //Set height
        if (comp.prop("height") == 'auto') {
            var contentHeight = editor.getModel().getLineCount() * 19;
            comp.element.find(".mm-code-editor-wrapper").height(contentHeight);
        }
        comp.editor = editor;

        $(document).keydown(function(e) {
            if ((e.key == 's' || e.which == 83) && e.ctrlKey && (comp.editor.hasTextFocus())) {
                e.preventDefault();
                e.stopPropagation();
                
                comp.trigger("save");
            }
            
            if ((e.key == 'r' || e.which == 82) && e.ctrlKey && (comp.editor.hasTextFocus())) {
                e.preventDefault();
                e.stopPropagation();
                
                comp.trigger("run");
            }
        });
        
        if (comp.initialValue) {
            comp.prop("value", comp.initialValue);
        }
    }
    public initScope() {
        const comp = this;
        super.initScope();
        
        this.scope.action = function(e) {
            const btn = this.actions[$(e.target).attr('data-index')];
            if (btn.onClick !== undefined && comp.isFunction(btn.onClick)) {
                btn.onClick.apply(comp)
            }
            comp.trigger("action", btn.value);
        }
        this.scope.triggerAutoSave = function() {
            if (this.autoSave) {
                comp.trigger("auto-save");
            }
        }
    }

    public static template() {
        return `
            <div class="border {{class}}">
                <div class="navbar navbar-light bg-light bg-gradient border-bottom">
                    <div class="navbar-nav ps-2 flex-row justify-content-start">
                        {{#each actions as |btn|}}
                        <button class="btn btn-icon btn-sm btn-outline-secondary ms-1" {{echo btn.disabled 'disabled'}} type="button" mm-click="this.action(event)" data-index="{{@index}}">
                            <i class="fa fa-{{btn.icon}}"></i>
                        </button>
                        {{/each}}
                    </div>
                    {{#if components.header}}
                    <div class="navbar-nav flex-row justify-content-end pe-2">
                        <mm-component name="{{components.header.name}}" type="{{components.header.type}}"></mm-component>
                    </div>
                    {{/if}}
                    &nbsp;
                </div>
                <div class="mm-code-editor-main" style="padding-right: 1px">
                    <mm-component name="{{components.editor.name}}" type="{{components.editor.type}}"></mm-component>
                </div>
                <pre class="d-none p-0 border-0">{{{value}}}</pre>
            </div>
        `;
    }

    public static properties() {
        let props = super.properties();

        props['readonly'] = {
            label: "Readonly",
            type: "mmCheckbox",
            default: false
        };

        props['height'] = {
            label: "Height",
            type: "mmNumber",
            default: 400
        }

        props["actions"] = {
            label: "Actions",
            type: "mmRepeater",
            props: {
                columns: [
                    {
                        key: "value",
                        label: "Value",
                        primary: true,
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "icon",
                        label: 'Icon',
                        component: {
                            type: "mmTextfield"
                        }
                    },
                    {
                        key: "disabled",
                        label: 'Disabled',
                        component: {
                            type: "mmCheckbox"
                        }
                    }
                ]
            }
        };

        props["autoSave"] = {
            label: "Auto save",
            type: "mmCheckbox",
            default: true
        };

        props["lineNumbers"] = {
            label: "Line numbers",
            type: "mmDropdown",
            props: {
                options: [
                    {label: "On", value: "on"},
                    {label: "Off", value: "off"}
                ]
            },
            default: "on"
        };

        props["scrollable"] = {
            label: "Scrollable",
            type: "mmCheckbox",
            default: true
        };

        return props;
    }

    public static events() {
        let events = super.events();
        
        events["auto-save"] = {
            label: "Auto Save"
        };

        events["save"] = {
            label: "Save"
        };

        events["run"] = {
            label: "Run"
        };

        events["action"] = {
            label: "Action"
        };

        return events;
    }

    public setHeight(h) {
        this.get("editor").element.height(h);
    }

    public setReadonly(bool) {
        let editor = this.editor
        if (editor) {
            editor.updateOptions({
                readOnly: bool
            });
        }
        this.setScopeVal('readonly', bool);
    }

    public setValue(val) {
        if (this.options['language'] === "json" && (this.isObject(val) || this.isArray(val))) {
            val = JSON.stringify(val, null, 4);
        }
        this.setScopeVal("value", val);
        let editor = this.editor;
        if (editor) {
            editor.setValue(val);
        }
    }

    public getValue() {
        let val = this.getScopeVal("value");
        if (! val) {
            return val;
        }
        if (this.options['language'] === "json") {
            try {
                val = JSON.parse(val);
                return val;
            } catch (e) {
                return val;
            } 
        }

        return val;
    }

    public getHeight() {
        return this.get('editor').element.height
    }

    public getCommandId(index) {
        let commands = this.prop("commands");
        if (! commands) {
            return null;
        }
        if (commands[index] === undefined) {
            return null;
        }
        if (commands[index].id === undefined) {
            return null;
        }

        return commands[index].id;
    }

    public addAction(action) {
        let actions = this.prop("actions");
        if (! actions) {
            actions = [];
        }
        actions.push(action);
        this.prop("actions", actions);
    }

    public updateAction(action) {
        let actions = this.prop("actions");
        for (let i = 0; i < actions.length; i++) {
            if (actions[i].value == action.value) {
                for (let key in action) {
                    actions[i][key] = action[key];
                }
                break;
            }
        }
        this.prop("actions", actions);
    }
}