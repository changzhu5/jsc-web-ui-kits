import BaseComponent from "ui/component/component";
import app from "ui/module/index";
import * as $ from "jquery";

export default class Table extends BaseComponent {
    public initScope(data: object = null) {
        super.initScope(data);
        const comp = this;
        this.scope.getRowClass = function(index) {
            if (comp.isFunction(this.rowClass)) {
                const row = comp.prop("rows")[index];
                return this.rowClass(index, row);
            }

            return "";
        }
        this.scope.getCellClass = function(i, j) {
            if (comp.isFunction(this.cellClass)) {
                return this.cellClass(i, j);
            }

            return "";
        }
        this.scope.displayCell = function(data) {
            if (comp.isString(data) || comp.isNumber(data)) {
                return data;
            }
            if (comp.isArray(data)) {
                return data.join(", ");
            }
            let c = app.create(data);
            return `<mm-component name="${c.name}" type="${c.type}"></mm-component>`;
        }
        this.scope.createAction = function(row) {
            const builder = comp.prop("actionBuilder");
            const action = builder(row, comp);
            if (comp.isObject(action)) {
                const c = app.create(action);
                return `<mm-component name="${c.name}" type="${c.type}"></mm-component>`;
            }
            return action;
        }
    }
    
    public static template() {
        return `
            <table class="table {{class}}">
                {{#if headers}}
                <thead class="{{headerClass}}">
                    <tr>
                        {{#each headers as |header|}}
                        <th>
                        <mm-component name="{{header.name}}" type="{{header.type}}"></mm-component>
                        </th>
                        {{/each}}
                        {{#if action}}
                        <th class="fit"></th>
                        {{/if}}
                    </tr>
                </thead>
                {{/if}}
                <tbody>
                    {{#each rows as |row|}}
                    <tr class="{{call 'getRowClass' @root @index}}" data-index="{{@index}}">
                        {{#each row as |cell|}}
                        <td class="{{call 'getCellClass' @root @../index @index}}">{{{call 'displayCell' @root cell}}}</td>
                        {{/each}}
                        {{#if (isFunc @root/actionBuilder)}}
                        <td class="{{call 'getCellClass' @root @../index 'action'}}">{{{call 'createAction' @root row}}}</td>
                        {{/if}}
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        `;
    }

    public static properties() {
        let props = super.properties();
        props["headers"] = {
            label: "Headers",
            type: "mmRepeater",
            props: {
                columns: [
                    {
                        key: "component",
                        label: "Component",
                        component: {
                            type: "mmComponentForm"
                        }
                    }
                ]
            }
        };

        props["rows"] = {
            label: "Rows",
            type: "mmCodeEditor",
        };

        props["headerClass"] = {
            label: "Header Class",
            type: "mmTextfield"
        };

        props["rowClass"] = {
            label: "Row Class",
            type: "mmFunction"
        };

        props["cellClass"] = {
            label: "Cell Class",
            type: "mmFunction"
        };

        props["actionBuilder"] = {
            label: "Action Builder",
            type: "mmFunction"
        };

        return props;
    }

    public setHeaders(headers) {
        if (this.isArray(headers)) {
            let list = [];
            for (const h of headers) {
                list.push(app.create(h));
            }
            this.setScopeVal("headers", list);
        }
    }

    public getRowIndex(comp: BaseComponent) {
        const tr = comp.element.closest("tr");
        if (tr.length > 0) {
            return parseInt(tr.attr("data-index"));
        }

        return -1;
    }

    public deleteRow(index: number) {
        let rows = this.prop("rows");
        if (this.isArray(rows)) {
            rows.splice(index, 1);
            this.prop("rows", rows);
        }
    }

    public getActionByIndex(index: number) {
        const tr = this.element.find("tbody > tr").eq(index);
        const td = tr.children().last();
        const element = td.children().first();
        
        return app.component(element.attr("data-component-name"), element.attr("data-component-type"));
    }
}