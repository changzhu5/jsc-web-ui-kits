import BaseContainer from "ui/component/container";
import * as $ from "jquery/dist/jquery.min.js";
import app from "ui/module/index";
import DataMeta from "ui/module/data.meta";

export default class DataGrid extends BaseContainer
{
    public primaryKeyColumn: DataMeta

    public constructor(options) {
        if (! options.props) {
            options.props = {};
        }
        if (! options.props.columns) {
            options.props.columns = [
                {
                    key: "text",
                    label: "Text",
                    primary: true,
                    component: {
                        type: "mmTextfield"
                    }
                }
            ];
        }
        options.props.components = {
            pager: {
                type: "mmPager"
            }
        };
        super(options);
        
        const comp = this;
        
        this.get("pager").on("page", function() {
            comp.trigger("page", this.prop("page"));
            comp.load();          
        });

        this.load();
    }

    public initScope(data: object = null) {
        super.initScope(data);
        const comp = this;
        this.scope.checkbox = {
            type: "mmCheckbox"
        };
        this.scope.cell = "";
        this.scope.closeEditCell = function(e) {
            e.stopPropagation();
            if (this.cell) {
                let name = this.cell.join(":");
                let column = comp.getScopeVal("columns")[this.cell[2]];
                let type = column.getComponent().type;
                let doc = comp.getScopeVal("docs")[this.cell[1]];
                if (app.component(name, type)) {
                    let value = app.component(name, type).prop("value");
                    let selector = `tr[data-index=${this.cell[1]}] > td[data-index=${this.cell[2]}]`;
                    column.setValue(doc, value);
                    app.component(name, type).destroy();
                    comp.element.find(selector).children().eq(0).show().text(column.display(doc)).next().hide();
                    this.cell = "";
                }
            }
        }
        this.scope.editCell = function(e) {
            if (! comp.prop("canEditCell")) {
                return;
            }
            this.closeEditCell(e);
            const parent = $(e.target).closest("td").children();
            const col = $(e.target).closest('td').attr("data-index");
            const row = $(e.target).closest('tr').attr("data-index");
            const column = comp.getScopeVal("columns")[col];
            const config = column.getComponent();
            const doc = comp.getScopeVal("docs")[row];
            config.name = [comp.name, row, col].join(":");
            let c = app.create(config);
            parent.eq(0).hide();
            parent.eq(1).html(c.element).show();
            c.prop("value", column.getValue(doc));
            this.cell = [comp.name, row, col];
        }
        this.scope.toggle = function(e) {
            $(e.target).closest("button").next().toggle();
        }
        this.scope.click = function(e, target) {
            e.stopPropagation();
            e.preventDefault();
            target.closest(".dropdown-menu").hide();
            
            const docIndex = parseInt(target.attr("data-doc-index"));
            const actionIndex = parseInt(target.attr("data-action-index"));
            const actions = comp.prop("actions");
            const action = actions.options[actionIndex];
            const doc = this.docs[docIndex];
            
            if (comp.isFunction(action.onClick)) {
                action.onClick.apply(comp, [doc, docIndex]);
            }
            
            comp.trigger("click", action.value, doc, docIndex);
        }
        app.on("click", function(e) {
            if ($(e.target).closest(`div[data-component-name=${comp.name}]`).length == 0) {
                comp.scope.closeEditCell(e);
                if (comp.element) {
                    comp.element.find(".dropdown-menu").hide();
                }
            }
        });
    }

    public static template() {
        return `
            <div class="row position-relative {{class}}">
                {{#if components.top}}
                <div class="col-sm-12">
                    <mm-component name="{{components.top.name}}" type="{{components.top.type}}"></mm-component>
                </div>
                {{/if}}
                <div class="table-responsive">
                    <table class="table table-bordered table-check table-hover">
                        <thead>
                            <tr class="bg-light">
                                {{#if ../selectable}}
                                <th class="fit"></th>
                                {{/if}}
                                {{#each columns}}
                                {{#if (call 'visible' this)}}
                                <th class="align-middle" style="width: {{echo this.width this.width 'auto'}}">{{{call 'getLabel' this}}}</th>
                                {{/if}}
                                {{/each}}
                                {{#if actions}}
                                <th></th>
                                {{/if}}
                            </tr>
                        </thead>
                        <tbody>
                            {{#each docs as |doc|}}
                            <tr data-index="{{@index}}">
                                {{#if ../selectable}}
                                <td class="fit align-middle">
                                    <mm-component options="checkbox"></mm-component>
                                </td>
                                {{/if}}
                                {{#each ../columns as |col|}}
                                {{#if (call 'visible' col)}}
                                <td class="mm-data-cell align-middle {{echo (and @root/canEditCell (call 'editable' col)) 'cursor-pointer'}}" mm-dblclick="this.editCell(event)" data-index="{{@index}}">
                                    <span>{{{call 'display' col doc}}}</span>
                                    <div></div>
                                </td>
                                {{/if}}
                                {{/each}}
                                {{#if (equal ../actions.type 'button')}}
                                <td class="fit align-middle">
                                    <div class="d-flex">
                                        {{#each ../actions.options as |action|}}
                                        {{#if (call 'visible' action doc @../index)}}
                                        <button data-doc-index="{{@../index}}" data-action-index="{{@index}}" class="mx-1 btn {{echo action.label '' 'btn-icon btn-sm'}} btn-{{action.type}} btn-sm" mm-click="this.click(event,target)" type="button">
                                            {{#if action.icon}}
                                            <i class="fa fa-{{action.icon}} {{echo action.label 'me-1'}}"></i>
                                            {{/if}}
                                            {{#if action.label}}
                                            <span>{{action.label}}</span>
                                            {{/if}}
                                        </button>
                                        {{/if}}
                                        {{/each}}
                                    </div>
                                </td>
                                {{/if}}
                                {{#if (equal ../actions/type 'dropdown')}}
                                <td class="fit align-middle">
                                    {{#if (call 'visible' ../actions doc)}}
                                    <div class="">
                                        <button class="{{echo ../actions.trigger.label 'dropdown-toggle'}} btn btn-{{../actions.trigger.type}} {{echo ../actions.trigger.icon 'btn-icon btn-sm'}}" type="button" mm-click="this.toggle(event)">
                                            {{#if ../actions.trigger.icon}}
                                            <i class="fa fa-{{../actions.trigger.icon}}"></i>
                                            {{/if}}
                                            {{#if ../actions.trigger.label}}
                                            {{../actions.trigger.label}}
                                            {{/if}}
                                        </button>
                                        <ul class="dropdown-menu" style="left: auto; right: 0;">
                                            {{#each ../actions.options as |action|}}
                                            {{#if (call 'visible' action doc @../index)}}
                                            <li>
                                                <a data-doc-index="{{@../index}}" data-action-index="{{@index}}" class="dropdown-item" href="#" value="{{action.value}}" mm-click="this.click(event, target)">
                                                    {{#if action.icon}}
                                                    <i class="fa fa-{{action.icon}}"></i>
                                                    {{/if}}
                                                    <span>{{action.label}}</span>
                                                </a>
                                            </li>
                                            {{/if}}
                                            {{/each}}
                                        </ul>
                                    </div>
                                    {{/if}}
                                </td>
                                {{/if}}
                            </tr>
                            {{/each}}
                            {{#if (isEmpty docs)}}
                            <tr>
                                <td colspan="100%">No data found.</td>
                            </tr>
                            {{/if}}
                        </tbody>
                    </table>
                    {{#if components.pager}}
                    <mm-component name="{{components.pager.name}}" type="mmPager"></mm-component>
                    {{/if}}
                </div>
                {{#if components.bottom}}
                <div class="col-sm-12">
                    <mm-component name="{{components.bottom.name}}" type="{{components.bottom.type}}"></mm-component>
                </div>
                {{/if}}
            </div>   
        `;
    }

    public static events() {
        let events = super.events();

        events['click'] = {
            label: "Action click event"
        };

        events['load'] = {
            label: 'On data load'
        };

        events['page'] = {
            label: "On page"
        };

        return events;
    }

    public static properties() {
        let props = super.properties();
        props["columns"] = {
            label: "Columns[]",
            type: "mmCodeEditor",
            priority: 2
        };
        
        props["query"] = {
            label: "Data",
            type: "mmCodeEditor"
        };

        props["top"] = {
            label: "Top Component",
            type: "mmComponentForm",
            priority: 2
        };

        props["bottom"] = {
            label: "Bottom Component",
            type: "mmComponentForm",
            priority: 2
        };

        props["selectable"] = {
            label: "Selectable",
            type: "mmCheckbox",
            default: false
        };

        props["actions"] = {
            label: "Buttons[]",
            type: "mmCodeEditor"
        };

        props["canEditCell"] = {
            label: "Multiple cell edit",
            type: "mmCheckbox",
            default: false
        };

        props["pager"] = {
            label: "Pager config",
            type: "mmCodeEditor",
            priority: 0
        };

        return props;
    }

    public setColumns(metas) {
        if (! this.isArray(metas)) {
            throw "Invalid metas for repeater#" + this.name;
        }
        this.setScopeVal("metas", this.copy(metas));
        let hasPrimaryMeta = false;
        for (let i = 0; i < metas.length; i++) {
            if (! (metas[i] instanceof DataMeta)) {
                metas[i] = new DataMeta(metas[i]);
            }
            if (metas[i].primary) {
                this.primaryKeyColumn = metas[i];
                hasPrimaryMeta = true;
            }
        }
        if (! hasPrimaryMeta) {
            throw "Primary meta is not set";
        }
        this.setScopeVal("columns", metas);
    }

    public getColumns() {
        return this.getScopeVal("metas");
    }

    public load() {
        const query = this.prop("query");
        if (this.isFunction(query)) {
            const comp = this;
            query.apply(this).then(function(data) {
                if (data) {
                    comp.setScopeVal("docs", data.docs);
                    comp.get("pager").props({
                        numFound: data.total,
                        limit: data.limit ? data.limit : comp.get('pager').prop('limit')
                    }).apply();
                    comp.apply();
                    comp.trigger("load");
                }
            });
        } else {
            this.trigger("load");
        }
    }

    public setPager(pager) {
        this.setScopeVal("pager", this.copy(pager));
        this.get("pager").props(pager).apply();
    }

    public setQuery(q) {
        this.setScopeVal("query", q);
        if (this.isArray(q)) {
            this.setScopeVal("docs", q);
        } else if (this.isFunction(q)) {
            this.load();
        }
    }

    public setActions(actions) {
        if (! actions.type) {
            return;
        }
        
        if (actions.visible === undefined) {
            actions.visible = function() {
                return true;
            }
        }
        let btns = actions.options;
        for (let i = 0; i < btns.length; i++) {
            if (btns[i].visible === undefined) {
                btns[i].visible = function(doc, index) {
                    return true;
                }
            }
        }
        this.setScopeVal("actions", actions);
    }

    public setTop(config) {
        this.setScopeVal("top", this.copy(config));
        if (this.get("top")) {
            this.get("top").destroy();
        }
        this.add(app.create(config), "top");
    }

    public setBottom(config) {
        this.setScopeVal("bottom", this.copy(config));
        if (this.get("bottom")) {
            this.get("bottom").destroy();
        }
        this.add(app.create(config), "bottom");
    }
}