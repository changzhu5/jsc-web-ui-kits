import BaseComponent from "ui/component/component";
import app from "ui/module/index";
import * as $ from "jquery/dist/jquery.min.js";
import { ContainerComponentsType, PropertyType } from "ui/type";

class BaseContainer extends BaseComponent {

    public static template() {
        return `
            <div class="w-100 {{class}}">
                {{#if components.main}}
                <mm-component name="{{components.main.name}}" type="{{components.main.type}}"></mm-component>
                {{/if}}
            </div>
        `;
    }

    public static properties(): {[key: string]: PropertyType} {
        let props = super.properties();

        props['components'] = {
            label: "Components",
            type: "mmCodeEditor",
            priority: 20
        };

        return props;
    }

    public setComponents(components: ContainerComponentsType) {
        if (! components) {
            this.setScopeVal("components", null);
        }
        let comps = {};
        for (const [key, value] of Object.entries(components)) {
            if (! value) {
                continue;
            }
            let c = app.create(value);
            c.parent = this;
            comps[key] = {
                name: c.name,
                type: c.type
            };
        }
        this.setScopeVal("components", comps);
    }

    public getData(): object {
        let data = this.getScopeVal("data");
        if (! data) {
            data = {};
        }
        return data;
    }

    public getComponents() {
        let comps = this.getScopeVal("components");
        if (! comps) {
            return {};
        }
        return comps;
    }

    public get(area: string): any {
        let components = this.prop("components");
        if (components[area]) {
            return app.component(components[area].name, components[area].type);
        }

        return null;
    }
    
    public add(comp: BaseComponent, to: string, override: boolean = true): BaseContainer {
        let components = this.prop("components");

        if (components[to] == null || override) {
            components[to] = {
                name: comp.name,
                type: comp.type
            };
            this.prop("components", components);
        }
        
        return this;
    }
    
    public bulkAdd(comps: {[key: string]: BaseComponent}, override: boolean = true): BaseContainer {
        let components = this.prop("components");
        let changed = false;
        for (const [key, value] of Object.entries(comps)) {
            if (components[key] == null || override) {
                components[key] = {
                    name: value.name,
                    type: value.type
                };
                changed = true;
            }
        }
        if (changed) {
            this.prop("components", components);
        }

        return this;
    }
    
    public drop(comp: BaseComponent, to: string) {
        return this.add(comp, to);
    }
    
    public eject(comp: BaseComponent, destroy: boolean = false) {
        let components = this.prop("components");
        if (components) {
            for (const [key, value] of Object.entries(components)) {
                if (value['name'] == comp.name && value['type'] == comp.type) {
                    comp.element.appendTo($("body"));
                    delete components[key];

                    if (destroy) {
                        comp.destroy();
                    }

                    this.prop("components", components);
                }
            }
        }
    }


    public getComponentMap(): {[key: string]: BaseComponent} {
        let components = this.prop("components");
        let data = null;
        if (components) {
            data = {};
            for (const [key, value] of Object.entries(components)) {
                data[key] = app.component(value['name'], value['type']);
            }
        }

        return data;
    }
    

    public empty() {
        let map = this.getComponentMap();
        let components = this.prop("components");
        if (map) {
            for (const [key, comp] of Object.entries(map)) {
                if (comp instanceof BaseComponent) {
                    comp.destroy();
                }
                delete components[key];
            }
            this.prop("components", null);
        }
    }

    public destroy() {
        this.empty();
        super.destroy();
    }
}
export default BaseContainer;