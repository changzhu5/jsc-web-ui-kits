import app from "ui/module/index";
import components from "./components";
import * as Handlebars from "handlebars";

const singleAttrs = ["disabled", "readonly", "checked", "selected", "multiple"];
const keyValuePairAttrs = ["placeholder", "type"];

for (const type of singleAttrs) {
    Handlebars.registerHelper(type, function(value) {
        return value ? type : "";
    });
}

for (const type of keyValuePairAttrs) {
    Handlebars.registerHelper(type, function(value) {
        let str = value ? `${type}="${value}"` : "";
        return new Handlebars.SafeString(str);
    });
}

Handlebars.registerHelper("echo", function(value, string, elseString) {
    if (value) {
        return string;
    }
    if (typeof(elseString) === "string") {
        return elseString;
    }
    return "";
});

Handlebars.registerHelper("call", function(func, context, ...args) {
    if (args.length > 0) {
        args.pop();
    }
    if (typeof(context[func]) === 'function') {
        return context[func].apply(context, args);
    }
    return "";
});

Handlebars.registerHelper("apply", function(func, context, ...args) {
    if (args.length > 0) {
        args.pop();
    }
    if (typeof(func) === 'function') {
        return func.apply(context, args);
    }
    return "";
});

Handlebars.registerHelper("equal", function(variable, value) {
    return variable === value;
});

Handlebars.registerHelper("notEqual", function(variable, value) {
    return variable !== value;
});

Handlebars.registerHelper('isEmpty', function (value) {
    return value == null || !value || (Array.isArray(value) && value.length === 0);
});

Handlebars.registerHelper('isNotEmpty', function (value) {
    if (Array.isArray(value)) {
        return value.length > 0
    }
    return value != null;
});

Handlebars.registerHelper("indexOf", function(val, array) {
    if (! Array.isArray(array)) {
        return false;
    }
    return array.indexOf(val) > -1;
});

Handlebars.registerHelper("concat", function(...args) {
    args.pop();
    return args.join("");
});

Handlebars.registerHelper("and", function(...args) {
    args.pop();
    let bool = true;
    args.forEach(function(arg) {
        bool = bool && arg;
    });
    return bool;
});

Handlebars.registerHelper("or", function(...args) {
    args.pop();
    let bool = false;
    args.forEach(function(arg) {
        bool = bool || arg;
    });
    return bool;
});

Handlebars.registerHelper("not", function(value) {
    return !value;
});

Handlebars.registerHelper("compile", function(template, data) {
    if (typeof(data) === "undefined") {
        data = {};
    }
    const compile = Handlebars.compile(template);

    return compile(data);
});

Handlebars.registerHelper("get", function(obj, key) {
    return obj[key] == null ? "" : obj[key];
});

Handlebars.registerHelper("gt", function(left, right) {
    return left > right;
});
Handlebars.registerHelper("gte", function(left, right) {
    return left >= right;
});
Handlebars.registerHelper("lt", function(left, right) {
    return left < right;
});
Handlebars.registerHelper("lte", function(left, right) {
    return left <= right;
});
Handlebars.registerHelper("inc", function(value) {
    return parseInt(value) + 1;
});
Handlebars.registerHelper("style", function(obj) {
    if (obj || obj != null) {
        let items = [];
        for (const [key, value] of Object.entries(obj)) {
            items.push(`${key}: ${value}`);
        }
        let string = `style="${items.join(';')}"`;
        return new Handlebars.SafeString(string);
    }
    return '';
});
Handlebars.registerHelper("component", function(...args) {
    args.pop();
    if (args.length == 1) {
        const c = app.create({...args[0]});
        return `<mm-component name="${c.name}" type="${c.type}"></mm-component>`;
    }
    if (args.length == 2) {
        return `<mm-component name="${args[0]}" type="${args[1]}"></mm-component>`;
    }
});
Handlebars.registerHelper("isFunc", function(obj) {
    return typeof(obj) === 'function' ? true : false;
});

for (let type in components) {
    app.registerComponent(type, components[type]);
}

export default app;