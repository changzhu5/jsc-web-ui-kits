import BaseObject from "ui/module/base.object";
import app from "ui/module/index";

class DataMeta extends BaseObject
{
    /**
     * Table name of the key
     */
    private table;
    /**
     * Column name, it may be a table field or a relation name
     */
    private key;
    /**
     * Sub column defination, if the value is object or array
     */
    private meta;
    /**
     * BaseComponent to edit this column
     */
    private component;
    /**
     * Display cell
     */
    private display;
    /**
     * Display constructor, array version
     */
    private _display;
    /**
     * If this column is enabled to display
     */
    private enabled;

    private _visible;
    /**
     * Column title
     */
    private label;
    /**
     * Attached dataset
     */
    private dataset;
    /**
     * Is this primary column
     */
    private primary;
    /**
     * Parent meta node, if this meta is sub
     */
    private parent;
    /**
     * If meta has default value, means hidden input element
     */
    private value;
    /**
     * Column width
     */
    private width;
    /**
     * If the column is editable
     */
    private _editable;

    public constructor(config) {
        super();
        if (! this.isObject(config)) {
            throw "Invalid data meta config";
        }
        if (! this.isString(config.key)) {
            throw "key is required for meta config";
        }
        if (this.isString(config.table)) {
            this.table = config.table;
        }
        this.key = config.key;
        if (config.component) {
            this.component = config.component;
        }
        
        if (this.isString(config.label)) {
            this.label = config.label;
        }
        if (config.dataset !== undefined) {
            this.dataset = config.dataset;
        }

        if (config.parent instanceof DataMeta) {
            this.parent = config.parent;
        }
        if (this.isArray(config.meta)) {
            let meta = [];
            for (let i = 0; i < config.meta.length; i++) {
                config.meta[i]["parent"] = this;
                config.meta[i]["dataset"] = config.dataset;
                meta.push(new DataMeta(config.meta[i]));
            }
            this.meta = meta;
            this.component = {
                type: "mmRepeater",
                props: {
                    meta: this.meta
                }
            }
        }
        if (this.isFunction(config.display)) {
            this.display = config.display;
        } else if (this.isArray(config.display)) {
            this.display = new Function(config.display[0], config.display[1]);
            this._display = config.display;
        } else {
            this.display = function(row) {
                let data;
                let keys = this.key.split(".");
                if (this.table) {
                    data = row[this.table][keys[0]];
                } else {
                    if (row[this.key] == null) {
                        return "";
                    } else if (this.isArray(row[this.key])) {
                        return "[Array]";
                    } else if (this.isObject(row[this.key])) {
                        return "[Object]";
                    }
                    data = row[keys[0]];
                }
                if (keys.length > 1) {
                    data = JSON.parse(data);
                    for (let i = 1; i < keys.length; i++) {
                        data = data[keys[i]];
                    }
                    return data;
                } else {
                    return data;
                }
            }
        }
        if (config.enabled !== undefined) {
            this.enabled = !! config.enabled;
        } else {
            this.enabled = true;
        }

        if (config.visible !== undefined) {
            this._visible = !! config.visible;
        } else {
            this._visible = true;
        }

        if (config.primary !== undefined) {
            this.primary = !! config.primary; 
        } else {
            this.primary = false;
        }

        if (this.isString(config.value)) {
            this.value = config.value;
        }

        if (config.width !== undefined) {
            if (typeof(config.width) === "number") {
                this.width = config.width + "px";
            } else {
                this.width = config.width;
            }
        }

        if (config.editable !== undefined) {
            this._editable = !! config.editable;
        } else {
            this._editable = true;
        }
    }

    public update(config) {
        if (config.component !== undefined) {
            this.component = config.component;
        }
        if (this.isArray(config.meta)) {
            let meta = [];
            for (let i = 0; i < config.meta.length; i++) {
                config.meta[i]["parent"] = this;
                config.meta[i]["dataset"] = config.dataset;
                meta.push(new DataMeta(config.meta[i]));
            }
            this.meta = meta;
            this.component = {
                type: "mmRepeater",
                props: {
                    meta: this.meta
                }
            }
        }
        if (this.isFunction(config.display)) {
            this.display = config.display;
        } else if (this.isArray(config.display)) {
            this.display = new Function(config.display[0], config.display[1]);
            this._display = config.display;
        }

        if (config.enabled !== undefined) {
            this.enabled = !! config.enabled;
        }

        if (config.visible !== undefined) {
            this._visible = !! config.visible;
        }

        if (config.primary !== undefined) {
            this.primary = !! config.primary; 
        }

        if (this.isString(config.value)) {
            this.value = config.value;
        }

        if (config.width !== undefined) {
            this.width = config.width;
        }

        if (config.editable !== undefined) {
            this._editable = !! config.editable;
        }
    }

    public isPrimary() {
        return this.primary;
    }

    public editable() {
        if (! this.enabled) {
            return false;
        }
        if (! this._editable) {
            return false;
        }
        return true;
    }

    public visible() {
        if (! this.enabled) {
            return false;
        }
        if (! this._visible) {
            return false;
        }
        return true;
    }

    public getTable() {
        return this.table;
    }

    public getKey() {
        return this.key;
    }

    public getMeta() {
        return this.meta;
    }

    public getName() {
        if (this.table) {
            return this.table + "." + this.key;
        }
        return this.key;
    }

    public getValue(row) {
        if (row === undefined) {
            return this.value;
        }
        if (this.table) {
            if (row[this.table] === undefined) {
                return null;
            }
            if (row[this.table][this.key] === undefined) {
                return null;
            }
            return row[this.table][this.key];
        }
        if (row[this.key] === undefined) {
            return null;
        }
        return row[this.key];
    }

    public setValue(doc, value) {
        if (this.table) {
            doc[this.table][this.key] = value;
        } else {
            doc[this.key] = value;
        }
    }

    public getLabel() {
        return this.label;
    }

    public getConfig() {
        let config = {
            key: this.key,
            enabled:this.enabled,
            primary: this.primary,
            editable: this._editable,
            visible: this._visible
        };
        if (this.table) {
            config["table"] = this.table;
        }
        if (this.component) {
            config["component"] = this.component;
        }
        if (this.label) {
            config["label"] = this.label;
        }
        if (this.value) {
            config["value"] = this.value;
        }
        if (this.meta) {
            let meta = [];
            for (let i = 0; i < this.meta.length; i++) {
                meta.push(this.meta[i].getConfig());
            }
            config["meta"] = meta;
        }
        if (this._display) {
            config["display"] = this._display;
        }

        return config;
    }

    public getMetaByName(name: string) {
        for (let i = 0; i < this.meta.length; i++) {
            if (this.meta[i].getName() == name) {
                return this.meta[i];
            }
        }
        return null;
    }

    public getComponent() {
        return {...this.component}
    }

    public getPrimarySubMeta() {
        if (this.meta) {
            for (let i = 0; i < this.meta.length; i++) {
                if (this.meta[i].primary) {
                    return this.meta[i];
                }
            }
        }
        return null;
    }

    public setDisplay(func: Function) {
        this.display = func;
        return this;
    }

    public setCompLayoutConfig(config) {
        if (this.component.layoutConfig === undefined) {
            this.component.layoutConfig = {};
        }
        for (let key in config) {
            this.component.layoutConfig[key] = config[key];
        }
        return this;
    }

    public setCompProps(config) {
        if (this.component.props === undefined) {
            this.component.props = {};
        }
        for (let key in config) {
            this.component.props[key] = config[key];
        }
        return this;
    }
}

window['DataMeta'] = DataMeta;

export default DataMeta;