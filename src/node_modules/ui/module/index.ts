import App from "./app";
import BaseComponent from "ui/component/component";
import BaseContainer from "ui/component/container";
import BaseLayout from "ui/component/layout";
import BaseFormElement from "ui/component/form.element";
import * as moment from "moment";
import * as $ from "jquery/dist/jquery.min.js";
import BaseObject from './base.object';
import * as Handlebars from "handlebars";

let app = new App();
app.registerComponent("mmComponent", BaseComponent);
app.registerComponent("mmContainer", BaseContainer);
app.registerComponent("mmLayout", BaseLayout);
app.registerComponent("mmFormElement", BaseFormElement);

const events = ["click", "dblclick", "keydown", "keyup", "blur", "focus", "change", "input"];

for (const type of events) {
    app.registerAttr("mm-" + type, function(element, value, scope) {
        if (! element.data("mm-" + type) || element.data("mm-" + type) !== value) {
            element.data("mm-" + type, value);
            element.on(type, function(event) {
                let func = new Function('event', 'target', value);
                func.apply(scope, [event, $(this)]);
            });
        }
        element.removeAttr("mm-" + type);
    });
}

app.registerAttr("mm-enter", function(element, value, scope) {
    if (! element.data("mm-enter") || element.data("mm-enter") !== value) {
        element.data("mm-enter", value);
        element.on("keydown", function(event) {
            const keyCode = event.keyCode || event.which;
            if (keyCode === 13) {
                let func = new Function('event', value);
                func.apply(scope, [event]);
            }
        });
    }
    element.removeAttr("mm-enter");
});

app.registerAttr("mm-bind-value", function(element, attr, scope) {
    const value = scope.getValue(attr);
    element.val(value);
    if (! element.data("mm-bind-value")) {
        element.data("mm-bind-value", true);
        scope.watch(function(attr, element) {
            let value = this.getValue(attr);
            element.val(value);
        }, [attr, element]);
        element.on("change", function() {
            scope.setValue(attr, $(this).val());
        });
    }
});

app.registerTag("mm-template", function(element, scope) {
    const src = element.attr("src");
    const templateString = scope.getValue(src);
    if (templateString) {
        const template = Handlebars.compile(templateString);
        scope.watch(function() {
            const html = $(template(this));
            element.replaceWith(html);
            element = html;
            //Parse custom tags
            let tags = app.getTagDefs();
            tags.forEach(function(def, tag) {
                element.find(tag).each(function() {
                    def($(this), scope);
                });
            });
            //parse custom attributes
            let attributes = app.getAttributeDefs();
            attributes.forEach(function(def, attr) {
                element.find('[' + attr + ']').each(function() {
                    def($(this), $(this).attr(attr), scope);
                    $(this).removeAttr(attr);
                });
            });
        }, [template, element]);
    }
});

app.registerAttr("mm-no-drag", function(element) {
    element.on("mousedown", function() {
        $(this).data("down", true);
        $(this).closest(".mm-draggable").attr("draggable", false);
    });
});

app.registerAttr("mm-drag-handler", function(element) {
    element.addClass("cursor-grab");
    element.on({
        mousedown: function() {
            $(this).data("down", true);
            $(this).closest(".mm-draggable").attr("draggable", true);
        },
        mousemove: function() {
            if ($(this).data("down")) {
                

            }
        },
        mouseup: function() {
            $(this).data("down", false);
            $(this).closest(".mm-draggable").attr("draggable", false);
        }
    });
});

app.registerAttr("mm-draggable", function(element, attr, scope) {
    if (element.attr('data-index') === undefined) {
        throw "data-index is required for mm-draggable elements";
    }
    element.addClass("mm-draggable");
    element.on({
        dragstart: function(e) {
            scope.dragFrom = parseInt($(this).attr("data-index"));
        },
        dragover: function(e) {
            e.preventDefault();
        },
        dragenter: function(e) {
            scope.dragTo = parseInt($(this).attr("data-index"));

            if (scope.dragFrom == scope.dragTo) {
                return;
            }

            $(this).closest(".mm-draggable").addClass("mm-dragover");
            
        },
        drop: function(e) {
            e.preventDefault();
            $(this).removeClass("mm-dragover");
            $(this).attr("draggable", false);
            const func = scope.getValue(attr);
            if (scope.dragFrom != scope.dragTo && typeof(func) === "function") {
                func.apply(scope);
            }
        }
    });
});

app.registerAttr("mm-has-focus", function(element) {
    setTimeout(function() {
        element.focus();
    });
});

$(document).on("click", function() {
    app.trigger("body-click");
});
$(window).on("scroll", function(e) {
    app.trigger("window-scroll", e);
});

$(document).ready(function() {
    app.bootstrap();
});

window['mimi'] = app;
window['moment'] = moment;
window['jQuery'] = $;
window['mmBaseObject'] = BaseObject;
window['mmBaseComponent'] = BaseComponent;
window['mmBaseContainer'] = BaseContainer;
window['mmBaseLayout'] = BaseLayout;
window['mmBaseFormElement'] = BaseFormElement;

export default app;