abstract class BaseObject
{
    protected listeners;

    public constructor() {
        this.listeners = {};
    }

    public static events() {
        return {};
    }

    public getEvents() {
        return this.constructor['events']();
    }

    public getEventListeners(eventName) {
        if (! this.isArray(this.listeners[eventName])) {
            return [];
        }
        return this.listeners[eventName];
    }

    public on(eventName: string, func: Function) {
        let events = this.getEvents();
        if (events[eventName] === undefined) {
            throw  "Invalid event type - " + eventName;
        }
        if (this.listeners[eventName] === undefined) {
            this.listeners[eventName] = [];
        }
        this.listeners[eventName].push(func);

        return this;
    }

    public trigger(eventName: string, ...args: any[]) {
        let method = "on" + eventName.split("-").map(function(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }).join("");
        if (this.isFunction(this[method])) {
            this[method].apply(this, args);
        } else if (this.listeners[eventName] !== undefined) {
            for (let i = 0; i < this.listeners[eventName].length; i++) {
                this.listeners[eventName][i].apply(this, args);
            }
        }
    }

    public isString(val): boolean {
        return typeof(val) === "string";
    }

    public isNumber(val): boolean {
        return typeof(val) === "number";
    }

    public isArray(val): boolean {
        return Array.isArray(val);
    }

    public isObject(val): boolean {
        return typeof(val) === "object" && ! this.isArray(val);
    }

    public isFunction(val): boolean {
        return typeof(val) === "function";
    }

    public copy(val) {
        let str = JSON.stringify(val);
        return JSON.parse(str);
    }
}

export default BaseObject;