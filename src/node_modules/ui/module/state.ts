import BaseObject from "ui/module/base.object";
import { ComponentType, StateType, StateRunOption } from "ui/type";
import BaseComponent from "ui/component/component";
import app from "ui/module/index";
import * as $ from "jquery/dist/jquery.min.js";

declare let Promise;
declare let require;

const map = new Map();

export default class State extends BaseObject {
    public name: string;

    public component: BaseComponent;

    public constructor(config: StateType) {
        super();
        if (map.has(config.name)) {
            throw `state#${config.name} has been defined`;
        }
        if (config.loaded === undefined) {
            config.loaded = false;
        }
        if (config.query === undefined) {
            config.query = null;
        }
        if (config.data === undefined) {
            config.data = null;
        }
        config.load = function() {
            return new Promise(function(resolve) {
                if (config.loaded) {
                    resolve();
                    return;
                }
                if (config.controllers) {
                    require(config.controllers, function() {
                        config.loaded = true;
                        resolve();
                    });
                }
                config.loaded = true;

                resolve();
            });
        }
        this.name = config.name;
        map.set(config.name, config);

        this.on("ready", function() {
            app.trigger("state-change", this);
        });
    }

    public static events() {
        let events = super.events();
        events['error'] = {
            label: "Error"
        };
        events['loading'] = {
            label: "Loading"
        };
        events['loaded'] = {
            label: "Loaded"
        };
        events['ready'] = {
            label: "Ready"
        };

        return events;
    }

    public run(prevState: State = null) {
        const _this = this;
        const state = map.get(this.name);
        //Replace view
        if (prevState) {
            prevState.getComponent().replaceWith(this.getComponent());
        }
        //Init controllers
        this.trigger("loading");
        state.load().then(function() {
            if (_this.getUrl()) {
                $.ajax({
                    url: _this.getUrl(),
                    method: 'GET',
                    error: function() {
                        if (_this.getEventListeners("error").length == 0) {
                            _this.trigger("error", {
                                description: "Unable to load state#" + state.name
                            });
                        }
                    },
                    success: function(resp) {
                        if (resp.status != "ok") {
                            _this.trigger("error", {
                                description: resp.msg
                            });
                        } else {
                            state.data = resp.data;
                            _this.trigger("ready");
                        }
                    },
                    complete: function() {
                        _this.trigger("loaded");
                    }
                });
            } else {
                _this.trigger("ready");
            }
        });
        return this;
    }

    public setQuery(q) {
        map.get(this.name).query = q;
    }

    public setData(data) {
        map.get(this.name).data = data;
    }

    public getUrl() {
        let query = this.getQuery();
        let base = map.get(this.name).url;
        return query ? base + "?" + new URLSearchParams(Object.entries(query)).toString() : base;
    }

    public getQuery() {
        return map.get(this.name).query;
    }

    public getData() {
        return map.get(this.name).data;
    }

    public getComponent() {
        if (! this.component) {
            this.component = app.create(map.get(this.name).view);
        }
        return this.component;
    }

    public loaded() {
        return map.get(this.name).loaded;
    }
}